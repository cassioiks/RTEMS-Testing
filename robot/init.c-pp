# 1 "init.c"
 





# 1 "/usr/local/rtems/mrm332/lib/include/bsp.h" 1 3
 




















# 1 "/usr/local/rtems/mrm332/lib/include/rtems.h" 1 3
 























 











# 1 "/usr/local/rtems/mrm332/lib/include/rtems/system.h" 1 3
 






















 





# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/targopts.h" 1 3
 
 



















  

 






# 30 "/usr/local/rtems/mrm332/lib/include/rtems/system.h" 2 3


 














































 
















 



 



typedef void * proc_ptr;

 







 













# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 1 3
 





















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/m68k.h" 1 3
 





















 


























































 








# 183 "/usr/local/rtems/mrm332/lib/include/rtems/score/m68k.h" 3

 










# 229 "/usr/local/rtems/mrm332/lib/include/rtems/score/m68k.h" 3


 








 






  




# 260 "/usr/local/rtems/mrm332/lib/include/rtems/score/m68k.h" 3










# 278 "/usr/local/rtems/mrm332/lib/include/rtems/score/m68k.h" 3














    
















# 322 "/usr/local/rtems/mrm332/lib/include/rtems/score/m68k.h" 3


 




static inline unsigned int m68k_swap_u32(
  unsigned int value
)
{
  unsigned int swapped = value;

  asm volatile( "rorw  #8,%0" : "=d" (swapped) : "0" (swapped) );
  asm volatile( "swap  %0"    : "=d" (swapped) : "0" (swapped) );
  asm volatile( "rorw  #8,%0" : "=d" (swapped) : "0" (swapped) );

  return( swapped );
}

static inline unsigned int m68k_swap_u16(
  unsigned int value
)
{
  unsigned short swapped = value;

  asm volatile( "rorw  #8,%0" : "=d" (swapped) : "0" (swapped) );

  return( swapped );
}

 

















 
# 23 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/m68ktypes.h" 1 3
 























 



typedef unsigned char  unsigned8;       
typedef unsigned short unsigned16;      
typedef unsigned int   unsigned32;      
typedef unsigned long long unsigned64;  

typedef unsigned16     Priority_Bit_map_control;

typedef signed char      signed8;       
typedef signed short     signed16;      
typedef signed int       signed32;      
typedef signed long long signed64;      

typedef unsigned32 boolean;      

typedef float          single_precision;      
typedef double         double_precision;      

typedef void m68k_isr;

typedef void ( *m68k_isr_entry )( void );








 
# 25 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 2 3



 




 













 







 




















 














 









 

 



typedef struct {
  unsigned32  sr;                 
  unsigned32  d2;                 
  unsigned32  d3;                 
  unsigned32  d4;                 
  unsigned32  d5;                 
  unsigned32  d6;                 
  unsigned32  d7;                 
  void       *a2;                 
  void       *a3;                 
  void       *a4;                 
  void       *a5;                 
  void       *a6;                 
  void       *a7_msp;             
}   Context_Control;

 





 






typedef struct {
  unsigned16   _exception_bits;
  unsigned16   _trap_enable_bits;
  unsigned16   _sticky_bits;
  unsigned16   _rounding_mode;
  unsigned16   _format;
  unsigned16   _last_operation;
  union {
    float sf;
    double df;
  } _operand1;
  union {
    float sf;
    double df;
  } _operand2;
} Context_Control_fp;

# 165 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3


 




typedef struct {
  unsigned32   TBD;    
} CPU_Interrupt_frame;

 




typedef struct {
  void       (*pretasking_hook)( void );
  void       (*predriver_hook)( void );
  void       (*postdriver_hook)( void );
  void       (*idle_task)( void );
  boolean      do_zero_of_workspace;
  unsigned32   idle_task_stack_size;
  unsigned32   interrupt_stack_size;
  unsigned32   extra_mpci_receive_server_stack;
  void *     (*stack_allocate_hook)( unsigned32 );
  void       (*stack_free_hook)( void* );
   

  m68k_isr    *interrupt_vector_table;
}   rtems_cpu_table;

 




 






 

extern  void                   *_CPU_Interrupt_stack_low;
extern  void                   *_CPU_Interrupt_stack_high;

extern char                         _VBR[]; 

# 241 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3



 

 







 





 





 






 





 







 








 

 





















unsigned32 _CPU_ISR_Get_level( void );

 

 










# 344 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3









 





 








# 380 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3
# 395 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3


 

 






# 418 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3








 

 






















 


# 475 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3


# 494 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3
# 513 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3




 

 















 

 

 





void _CPU_Initialize(
  rtems_cpu_table  *cpu_table,
  void      (*thread_dispatch)
);

 





 
void _CPU_ISR_install_raw_handler(
  unsigned32  vector,
  proc_ptr    new_handler,
  proc_ptr   *old_handler
);

 





void _CPU_ISR_install_vector(
  unsigned32       vector,
  proc_ptr         new_handler,
  proc_ptr        *old_handler
);

 





void _CPU_Install_interrupt_stack( void );

 





void _CPU_Context_switch(
  Context_Control  *run,
  Context_Control  *heir
);

 





void _CPU_Context_save_fp(
  void **fp_context_ptr
);

 





void _CPU_Context_restore_fp(
  void **fp_context_ptr
);

# 648 "/usr/local/rtems/mrm332/lib/include/rtems/score/cpu.h" 3










 
# 128 "/usr/local/rtems/mrm332/lib/include/rtems/system.h" 2 3







 




extern const char _RTEMS_version[];          
extern const char _Copyright_Notice[];       

 



extern  rtems_cpu_table _CPU_Table;                

 







































 










 
# 37 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/status.h" 1 3
 





















 

 

typedef enum {
  RTEMS_SUCCESSFUL               =  0,  
  RTEMS_TASK_EXITTED             =  1,  
  RTEMS_MP_NOT_CONFIGURED        =  2,  
  RTEMS_INVALID_NAME             =  3,  
  RTEMS_INVALID_ID               =  4,  
  RTEMS_TOO_MANY                 =  5,  
  RTEMS_TIMEOUT                  =  6,  
  RTEMS_OBJECT_WAS_DELETED       =  7,  
  RTEMS_INVALID_SIZE             =  8,  
  RTEMS_INVALID_ADDRESS          =  9,  
  RTEMS_INVALID_NUMBER           = 10,  
  RTEMS_NOT_DEFINED              = 11,  
  RTEMS_RESOURCE_IN_USE          = 12,  
  RTEMS_UNSATISFIED              = 13,  
  RTEMS_INCORRECT_STATE          = 14,  
  RTEMS_ALREADY_SUSPENDED        = 15,  
  RTEMS_ILLEGAL_ON_SELF          = 16,  
  RTEMS_ILLEGAL_ON_REMOTE_OBJECT = 17,  
  RTEMS_CALLED_FROM_ISR          = 18,  
  RTEMS_INVALID_PRIORITY         = 19,  
  RTEMS_INVALID_CLOCK            = 20,  
  RTEMS_INVALID_NODE             = 21,  
  RTEMS_NOT_CONFIGURED           = 22,  
  RTEMS_NOT_OWNER_OF_RESOURCE    = 23,  
  RTEMS_NOT_IMPLEMENTED          = 24,  
  RTEMS_INTERNAL_ERROR           = 25,  
  RTEMS_NO_MEMORY                = 26,  
  RTEMS_IO_ERROR                 = 27,  
  RTEMS_PROXY_BLOCKING           = 28   
} rtems_status_code;




extern rtems_status_code _Status_Object_name_errors_to_status[];









 



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/status.inl" 1 3
 

















 









static __inline__  boolean rtems_is_status_successful(
  rtems_status_code code
)
{
  return (code == RTEMS_SUCCESSFUL);
}

 









static __inline__  boolean rtems_are_statuses_equal(
  rtems_status_code code1,
  rtems_status_code code2
)
{
   return (code1 == code2);
}


 
# 76 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/status.h" 2 3







 
# 38 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/types.h" 1 3
 




















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/object.h" 1 3
 























# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/chain.h" 1 3
 





















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/address.h" 1 3
 





















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/address.inl" 1 3
 

















 










static __inline__  void *_Addresses_Add_offset (
  void       *base,
  unsigned32  offset
)
{
  return (void *)((char *)base + offset);
}

 










static __inline__  void *_Addresses_Subtract_offset (
  void       *base,
  unsigned32  offset
)
{
  return (void *)((char *)base - offset);
}

 












static __inline__  unsigned32 _Addresses_Subtract (
  void *left,
  void *right
)
{
  return ((char *) left - (char *) right);
}

 










static __inline__  boolean _Addresses_Is_aligned (
  void *address
)
{
    return ( ( (unsigned32)address % 4  ) == 0 );
}

 












static __inline__  boolean _Addresses_Is_in_range (
  void *address,
  void *base,
  void *limit
)
{
  return ( address >= base && address <= limit );
}


 
# 23 "/usr/local/rtems/mrm332/lib/include/rtems/score/address.h" 2 3







 
# 23 "/usr/local/rtems/mrm332/lib/include/rtems/score/chain.h" 2 3


 













typedef struct Chain_Node_struct Chain_Node;

struct Chain_Node_struct {
  Chain_Node *next;
  Chain_Node *previous;
};

 














typedef struct {
  Chain_Node *first;
  Chain_Node *permanent_null;
  Chain_Node *last;
} Chain_Control;

 










void _Chain_Initialize(
  Chain_Control *the_chain,
  void          *starting_address,
  unsigned32     number_nodes,
  unsigned32     node_size
);

 


 






 










void _Chain_Extract(
  Chain_Node *the_node
);

 











Chain_Node *_Chain_Get(
  Chain_Control *the_chain
);

 










void _Chain_Insert(
  Chain_Node *after_node,
  Chain_Node *the_node
);

 










void _Chain_Append(
  Chain_Control *the_chain,
  Chain_Node    *the_node
);










 
# 25 "/usr/local/rtems/mrm332/lib/include/rtems/score/object.h" 2 3


 







 




typedef void * Objects_Name;

 







 



typedef boolean (*Objects_Name_comparators)(
  void       *  ,
  void       *  ,
  unsigned32    
);

 








typedef unsigned32 Objects_Id;













 



typedef enum {
  OBJECTS_NO_CLASS                    =  0,
  OBJECTS_INTERNAL_THREADS            =  1,
  OBJECTS_RTEMS_TASKS                 =  2,
  OBJECTS_POSIX_THREADS               =  3,
  OBJECTS_ITRON_TASKS                 =  4,
  OBJECTS_RTEMS_TIMERS                =  5,
  OBJECTS_RTEMS_SEMAPHORES            =  6,
  OBJECTS_RTEMS_MESSAGE_QUEUES        =  7,
  OBJECTS_RTEMS_PARTITIONS            =  8,
  OBJECTS_RTEMS_REGIONS               =  9,
  OBJECTS_RTEMS_PORTS                 = 10,
  OBJECTS_RTEMS_PERIODS               = 11,
  OBJECTS_RTEMS_EXTENSIONS            = 12,
  OBJECTS_POSIX_KEYS                  = 13,
  OBJECTS_POSIX_INTERRUPTS            = 14,
  OBJECTS_POSIX_MESSAGE_QUEUES        = 15,
  OBJECTS_POSIX_MUTEXES               = 16,
  OBJECTS_POSIX_SEMAPHORES            = 17,
  OBJECTS_POSIX_CONDITION_VARIABLES   = 18,
  OBJECTS_ITRON_EVENTFLAGS            = 19,
  OBJECTS_ITRON_MAILBOXES             = 20,
  OBJECTS_ITRON_MESSAGE_BUFFERS       = 21,
  OBJECTS_ITRON_PORTS                 = 22,
  OBJECTS_ITRON_SEMAPHORES            = 23,
  OBJECTS_ITRON_VARIABLE_MEMORY_POOLS = 24,
  OBJECTS_ITRON_FIXED_MEMORY_POOLS    = 25
} Objects_Classes;
 





 





typedef enum {
  OBJECTS_LOCAL  = 0,          
  OBJECTS_REMOTE = 1,          
  OBJECTS_ERROR  = 2           
}  Objects_Locations;

 




typedef struct {
  Chain_Node     Node;
  Objects_Id     id;
  Objects_Name   name;
}   Objects_Control;

 




typedef struct {
  Objects_Classes   the_class;           
  Objects_Id        minimum_id;          
  Objects_Id        maximum_id;          
  unsigned32        maximum;             
  boolean           auto_extend;         
  unsigned32        allocation_size;     
  unsigned32        size;                
  Objects_Control **local_table;
  Objects_Name     *name_table;
  Chain_Control    *global_table;        
  Chain_Control     Inactive;            
  unsigned32        inactive;            
  unsigned32       *inactive_per_block;  
  void            **object_blocks;       
  boolean           is_string;           
  unsigned32        name_length;         
  boolean           is_thread;           
                                         
}   Objects_Information;

 




extern  unsigned32  _Objects_Local_node;
extern  unsigned32  _Objects_Maximum_nodes;

 





extern  Objects_Information 
    *_Objects_Information_table[OBJECTS_ITRON_FIXED_MEMORY_POOLS  + 1];

 







 








 











 








void _Objects_Handler_initialization(
  unsigned32 node,
  unsigned32 maximum_nodes,
  unsigned32 maximum_global_objects
);

 







void _Objects_Extend_information(
  Objects_Information *information
);

 







void _Objects_Shrink_information(
  Objects_Information *information
);

 













void _Objects_Initialize_information (
  Objects_Information *information,
  Objects_Classes      the_class,
  boolean              supports_global,
  unsigned32           maximum,
  unsigned32           size,
  boolean              is_string,
  unsigned32           maximum_name_length,
  boolean              is_task
);

 









Objects_Control *_Objects_Allocate(
  Objects_Information *information
);

 









Objects_Control *_Objects_Allocate_by_index(
  Objects_Information *information,
  unsigned32           index,
  unsigned32           sizeof_control
);

 









void _Objects_Free(
  Objects_Information *information,
  Objects_Control     *the_object
);

 






 
void _Objects_Clear_name(
  void       *name,
  unsigned32  length
);

 







void _Objects_Copy_name_string(
  void       *source,
  void       *destination
);

 







void _Objects_Copy_name_raw(
  void       *source,
  void       *destination,
  unsigned32  length
);

 







boolean _Objects_Compare_name_string(
  void       *name_1,
  void       *name_2,
  unsigned32  length
);

 







boolean _Objects_Compare_name_raw(
  void       *name_1,
  void       *name_2,
  unsigned32  length
);
 















typedef enum {
  OBJECTS_SUCCESSFUL,
  OBJECTS_INVALID_NAME,
  OBJECTS_INVALID_NODE
} Objects_Name_to_id_errors;




Objects_Name_to_id_errors _Objects_Name_to_id(
  Objects_Information *information,
  Objects_Name         name,
  unsigned32           node,
  Objects_Id          *id
);

 















Objects_Control *_Objects_Get (
  Objects_Information *information,
  Objects_Id           id,
  Objects_Locations   *location
);

 








Objects_Control *_Objects_Get_next(
    Objects_Information *information,
    Objects_Id           id,
    Objects_Locations   *location_p,
    Objects_Id          *next_id_p
);

 



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/object.inl" 1 3
 

















 









static __inline__  Objects_Id _Objects_Build_id(
  Objects_Classes  the_class,
  unsigned32       node,
  unsigned32       index
)
{
  return ( (the_class << 26 ) |
           (node << 16 )       |
           (index << 0 ) );
}

 







 
static __inline__  Objects_Classes _Objects_Get_class(
  Objects_Id id
)
{
  return (Objects_Classes) 
    ((id >> 26 ) & 0x000000cf );
}
 

 








static __inline__  unsigned32 _Objects_Get_node(
  Objects_Id id
)
{
  return (id >> 16 ) & 0x000003ff ;
}

 








static __inline__  unsigned32 _Objects_Get_index(
  Objects_Id id
)
{
  return (id >> 0 ) & 0x0000ffff ;
}

 







 
static __inline__  boolean _Objects_Is_class_valid(
  Objects_Classes the_class
)
{
  return the_class && the_class <= OBJECTS_ITRON_FIXED_MEMORY_POOLS ;
}

 









static __inline__  boolean _Objects_Is_local_node(
  unsigned32 node
)
{
  return ( node == _Objects_Local_node );
}

 









static __inline__  boolean _Objects_Is_local_id(
  Objects_Id id
)
{
  return _Objects_Is_local_node( _Objects_Get_node(id) );
}

 









static __inline__  boolean _Objects_Are_ids_equal(
  Objects_Id left,
  Objects_Id right
)
{
  return ( left == right );
}

 









static __inline__  Objects_Control *_Objects_Get_local_object(
  Objects_Information *information,
  unsigned32           index
)
{
  if ( index > information->maximum )
    return 0 ;
  return ( information->local_table[ index ] );
}

 









static __inline__  void _Objects_Set_local_object(
  Objects_Information *information,
  unsigned32           index,
  Objects_Control     *the_object
)
{
  if ( index <= information->maximum )
    information->local_table[ index ] = the_object;
}


 








 
static __inline__  Objects_Information *_Objects_Get_information(
  Objects_Id  id
)
{
  Objects_Classes  the_class;

  the_class = _Objects_Get_class( id );

  if ( !_Objects_Is_class_valid( the_class ) )
    return 0 ;

  return _Objects_Information_table[ the_class ];
}

 









static __inline__  void _Objects_Open(
  Objects_Information *information,
  Objects_Control     *the_object,
  Objects_Name         name
)
{
  unsigned32  index;

  index = _Objects_Get_index( the_object->id );
  _Objects_Set_local_object( information, index, the_object );

  if ( information->is_string ) 
    _Objects_Copy_name_string( name, the_object->name );
  else
    _Objects_Copy_name_raw( name, the_object->name, information->name_length );
}

 









static __inline__  void _Objects_Close(
  Objects_Information  *information,
  Objects_Control      *the_object
)
{
  unsigned32 index;

  index = _Objects_Get_index( the_object->id );
  _Objects_Set_local_object( information, index, 0  );
  _Objects_Clear_name( the_object->name, information->name_length );
}

 








static __inline__  void _Objects_Namespace_remove(
  Objects_Information  *information,
  Objects_Control      *the_object
)
{
  _Objects_Clear_name( the_object->name, information->name_length );
}


 
# 466 "/usr/local/rtems/mrm332/lib/include/rtems/score/object.h" 2 3










 
# 22 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/types.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/priority.h" 1 3
 






















 






typedef unsigned32 Priority_Control;




 




typedef struct {
  Priority_Bit_map_control *minor;         
  Priority_Bit_map_control  ready_major;   
  Priority_Bit_map_control  ready_minor;   
  Priority_Bit_map_control  block_major;   
  Priority_Bit_map_control  block_minor;   
}   Priority_Information;

 










extern  volatile Priority_Bit_map_control _Priority_Major_bit_map;
extern  Priority_Bit_map_control 
               _Priority_Bit_map[16]  ;

 




 






 




 




 









 
# 23 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/types.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/tod.h" 1 3
 






















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/watchdog.h" 1 3
 
























 




typedef unsigned32 Watchdog_Interval;

 



typedef void Watchdog_Service_routine;

typedef Watchdog_Service_routine ( *Watchdog_Service_routine_entry )(
                 Objects_Id,
                 void *
             );

 





 




typedef enum {
  WATCHDOG_INACTIVE,        
  WATCHDOG_BEING_INSERTED,  
  WATCHDOG_ACTIVE,          
  WATCHDOG_REMOVE_IT        
} Watchdog_States;

 






typedef enum {
  WATCHDOG_FORWARD,       
  WATCHDOG_BACKWARD       
} Watchdog_Adjust_directions;

 




typedef struct {
  Chain_Node                      Node;
  Watchdog_States                 state;
  Watchdog_Interval               initial;
  Watchdog_Interval               delta_interval;
  Watchdog_Interval               start_time;
  Watchdog_Interval               stop_time;
  Watchdog_Service_routine_entry  routine;
  Objects_Id                      id;
  void                           *user_data;
}   Watchdog_Control;

 




extern  volatile unsigned32  _Watchdog_Sync_level;
extern  volatile unsigned32  _Watchdog_Sync_count;

 




extern  Watchdog_Interval _Watchdog_Ticks_since_boot;

 




extern  Chain_Control _Watchdog_Ticks_chain;
extern  Chain_Control _Watchdog_Seconds_chain;

 









void _Watchdog_Handler_initialization( void );

 








Watchdog_States _Watchdog_Remove (
  Watchdog_Control *the_watchdog
);

 








void _Watchdog_Adjust (
  Chain_Control              *header,
  Watchdog_Adjust_directions  direction,
  Watchdog_Interval           units
);

 











void _Watchdog_Insert (
  Chain_Control         *header,
  Watchdog_Control      *the_watchdog
);

 








void _Watchdog_Tickle (
  Chain_Control *header
);










 
# 24 "/usr/local/rtems/mrm332/lib/include/rtems/score/tod.h" 2 3


 



















 







 




typedef struct {                    
  unsigned32 year;                  
  unsigned32 month;                 
  unsigned32 day;                   
  unsigned32 hour;                  
  unsigned32 minute;                
  unsigned32 second;                
  unsigned32 ticks;                 
}   TOD_Control;

 




extern  boolean _TOD_Is_set;

 



extern  TOD_Control _TOD_Current;

 




extern  Watchdog_Interval _TOD_Seconds_since_epoch;

 



extern  unsigned32 _TOD_Microseconds_per_tick;

 










extern  unsigned32 _TOD_Ticks_per_second;

 




extern  Watchdog_Control _TOD_Seconds_watchdog;

# 149 "/usr/local/rtems/mrm332/lib/include/rtems/score/tod.h" 3


extern const unsigned16 _TOD_Days_to_date[2][13];  
extern const unsigned16 _TOD_Days_since_last_leap_year[4];
extern const unsigned32 _TOD_Days_per_month[2][13];



 







void _TOD_Handler_initialization(
  unsigned32 microseconds_per_tick
);

 








void _TOD_Set(
  TOD_Control       *the_tod,
  Watchdog_Interval  seconds_since_epoch
);

 








boolean _TOD_Validate(
  TOD_Control *the_tod
);

 







Watchdog_Interval _TOD_To_seconds(
  TOD_Control *the_tod
);

 









void _TOD_Tickle(
  Objects_Id  id,
  void       *ignored
);

 













 














 























 
# 24 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/types.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/modes.h" 1 3
 





















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/isr.h" 1 3
 























 




typedef unsigned32 ISR_Level;

 



typedef unsigned32 ISR_Vector_number;

 



typedef void ISR_Handler;

 









typedef ISR_Handler ( *ISR_Handler_entry )(
                 ISR_Vector_number
             );

 




 


 





 




extern  boolean    _ISR_Signals_to_thread_executing;

 




extern  volatile unsigned32 _ISR_Nest_level;

 




extern  ISR_Handler_entry _ISR_Vector_table[ 256   ];

 







void _ISR_Handler_initialization ( void );

 












 












 



















 












 






 


 
 












 
















void _ISR_Handler( void );

 















void _ISR_Dispatch( void );

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/isr.inl" 1 3
 

















 

















static __inline__  boolean _ISR_Is_in_progress( void )
{
  return (_ISR_Nest_level != 0);
}




 









static __inline__  boolean _ISR_Is_vector_number_valid (
  unsigned32 vector
)
{
  return ( vector <= (256  - 1)  );
}

 










static __inline__  boolean _ISR_Is_valid_user_handler (
  void *handler
)
{
  return ( handler != 0 );
}


 
# 223 "/usr/local/rtems/mrm332/lib/include/rtems/score/isr.h" 2 3







 
# 23 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/modes.h" 2 3


 




typedef unsigned32 Modes_Control;

 























 




 















 










 
# 26 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/types.h" 2 3






 



typedef unsigned8       rtems_unsigned8;   
typedef unsigned16      rtems_unsigned16;  
typedef unsigned32      rtems_unsigned32;  

typedef signed8         rtems_signed8;     
typedef signed16        rtems_signed16;    
typedef signed32        rtems_signed32;    

 



typedef unsigned64      rtems_unsigned64;  
typedef signed64        rtems_signed64;    


typedef single_precision rtems_single;     
typedef double_precision rtems_double;     

typedef boolean          rtems_boolean;

typedef unsigned32       rtems_name;
typedef Objects_Id       rtems_id;

typedef Context_Control            rtems_context;
typedef Context_Control_fp         rtems_context_fp;
typedef CPU_Interrupt_frame        rtems_interrupt_frame;

 



typedef Watchdog_Interval rtems_interval;
typedef TOD_Control       rtems_time_of_day;

 


 
typedef Modes_Control rtems_mode;

 



# 94 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/types.h" 3







 
# 39 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/config.h" 1 3
 





















 









  


    
 







typedef void *posix_api_configuration_table;



# 1 "/usr/local/rtems/mrm332/lib/include/itron.h" 1 3
 

















 




                                  
# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/types.h" 1 3
 

















 
 




typedef signed8      B;        
typedef signed16     H;        
typedef signed32     W;        
typedef unsigned8    UB;       
typedef unsigned16   UH;       
typedef unsigned32   UW;       

typedef unsigned32   VW;       
typedef unsigned16   VH;       
typedef unsigned8    VB;       

typedef void        *VP;       

typedef void (*FP)();          

 







 







typedef signed32   INT;     
typedef unsigned32 UINT;    
typedef boolean    BOOL;    
typedef signed16   FN;      
typedef int        ID;      
                            
                            
                            
                            

typedef unsigned32 BOOL_ID; 

typedef signed32 HNO;       
typedef signed32 RNO;       
typedef signed32 NODE;      
typedef signed32 ATR;       
                            
typedef signed32 ER;        
typedef unsigned32 PRI;     
typedef signed32 TMO;       
                            
                            

 













 














 











 

# 25 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

                                  
# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/status.h" 1 3
 






















                             







                             







                             

                             


                             


                             

                             
                             

                             
                             

                             
                             
                             

                             








 

# 27 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3


 



# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/eventflags.h" 1 3
 

















 



typedef struct t_cflg {
  VP     exinf;      
  ATR    flgatr;     
  UINT   iflgptn;    
   
} T_CFLG;

 








 


 




 



typedef struct t_rflg {
  VP        exinf;       
  BOOL_ID   wtsk;        
  UINT      flgptn;      
   
} T_RFLG;

 



 



ER cre_flg(
  ID flgid,
  T_CFLG *pk_cflg
);

 



ER del_flg(
  ID flgid
);

 



ER set_flg(
  ID flgid,
  UINT setptn
);

 



ER clr_flg(
  ID flgid,
  UINT clrptn
);

 



ER wai_flg(
  UINT *p_flgptn,
  ID flgid,
  UINT waiptn,
  UINT wfmode
);

 



ER pol_flg(
  UINT *p_flgptn,
  ID flgid,
  UINT waiptn,
  UINT wfmode
);

 



ER twai_flg(
  UINT *p_flgptn,
  ID flgid,
  UINT waiptn,
  UINT wfmode,
  TMO tmout
);

 



ER ref_flg(
  T_RFLG *pk_rflg,
  ID flgid
);






 

# 33 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/fmempool.h" 1 3
 

















 



     
typedef struct t_cmpf {
  VP    exinf;      
  ATR   mpfatr;     
  INT   mpfcnt;     
  INT   blfsz;      
   
} T_CMPF;

 







 



     
typedef struct t_rmpf {
  VP        exinf;     
  BOOL_ID   wtsk;      
  INT       frbcnt;    
   
} T_RMPF;

 



 



ER cre_mpf(
  ID mpfid,
  T_CMPF *pk_cmpf
);

 



ER del_mpf(
  ID mpfid
);

 



ER get_blf(
  VP *p_blf,
  ID mpfid
);

 



ER pget_blf(
  VP *p_blf,
  ID mpfid
);

 



ER tget_blf(
  VP *p_blf,
  ID mpfid,
  TMO tmout
);

 



ER rel_blf(
  ID mpfid,
  VP blf
);

 



ER ref_mpf(
  T_RMPF *pk_rmpf,
  ID mpfid
);






 

# 34 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/intr.h" 1 3
 

















 



typedef struct t_dint {
  ATR   intatr;    
  FP    inthdr;    
   
} T_DINT;

 



 



ER def_int(
  UINT dintno,
  T_DINT *pk_dint
);

 



void ret_int( void );

 



void ret_wup(
  ID tskid
);

 



ER loc_cpu( void );

 



ER unl_cpu( void );

 



ER dis_int(
  UINT eintno
);

 



ER ena_int(
  UINT eintno
);

 



ER chg_iXX(
  UINT iXXXX
);

 



ER ref_iXX(
  UINT *p_iXXXX
);






 

# 35 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/mbox.h" 1 3
 

















 



typedef struct t_cmbx {
  VP    exinf;     
  ATR   mbxatr;    
   
  INT   bufcnt;    
   
} T_CMBX;

 








typedef struct t_msg {
   






  INT       msgpri;    
   
  unsigned8 msgcont[1];
} T_MSG;

 



typedef struct t_rmbx {
  VP        exinf;     
  BOOL_ID   wtsk;      
  T_MSG    *pk_msg;    
   
} T_RMBX;

 



 



ER cre_mbx(
  ID      mbxid,
  T_CMBX *pk_cmbx
);

 



ER del_mbx(
  ID mbxid
);

 



ER snd_msg(
  ID     mbxid,
  T_MSG *pk_msg
);

 



ER rcv_msg(
  T_MSG **ppk_msg,
  ID      mbxid
);

 



ER prcv_msg(
  T_MSG **ppk_msg,
  ID      mbxid
);

 



ER trcv_msg(
  T_MSG **ppk_msg,
  ID      mbxid,
  TMO     tmout
);

 



ER ref_mbx(
  T_RMBX *pk_rmbx,
  ID      mbxid
);







 

# 36 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/msgbuffer.h" 1 3
 

















 



typedef struct t_cmbf {
  VP    exinf;     
  ATR   mbfatr;    
  INT   bufsz;     
  INT   maxmsz;    
   
} T_CMBF;

 








 






 



typedef struct t_rmbf {
  VP        exinf;      
  BOOL_ID   wtsk;       
                        
  BOOL_ID   stsk;       
                        
  INT       msgsz;      
  INT       frbufsz;    
   
} T_RMBF;

 



 



ER cre_mbf(
  ID mbfid,
  T_CMBF *pk_cmbf
);

 



ER del_mbf(
  ID mbfid
);

 



ER snd_mbf(
  ID mbfid,
  VP msg,
  INT msgsz
);

 



ER psnd_mbf(
  ID mbfid,
  VP msg,
  INT msgsz
);

 



ER tsnd_mbf(
  ID mbfid,
  VP msg,
  INT msgsz,
  TMO tmout
);

 



ER rcv_mbf(
  VP msg,
  INT *p_msgsz,
  ID mbfid
);

 



ER prcv_mbf(
  VP msg,
  INT *p_msgsz,
  ID mbfid
);

 



ER trcv_mbf(
  VP msg,
  INT *p_msgsz,
  ID mbfid,
  TMO tmout
);

 



ER ref_mbf(
  T_RMBF *pk_rmbf,
  ID mbfid
);






 

# 37 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/sysmgmt.h" 1 3
 

















 



typedef struct t_ver {
  UH   maker;      
  UH   id;         
  UH   spver;      
  UH   prver;      
  UH   prno[4];    
  UH   cpu;        
  UH   var;        
} T_VER;

 






 



# 54 "/usr/local/rtems/mrm332/lib/include/itronsys/sysmgmt.h" 3


 



# 73 "/usr/local/rtems/mrm332/lib/include/itronsys/sysmgmt.h" 3


 






























# 175 "/usr/local/rtems/mrm332/lib/include/itronsys/sysmgmt.h" 3


 



































 



typedef struct t_rsys {
  INT   sysstat;    
   
} T_RSYS;

 













 



typedef struct t_rcfg {
   
} T_RCFG;

 



typedef struct t_dsvc {
  ATR   svcatr;    
  FP    svchdr;    
   
} T_DSVC;

 



typedef struct t_dexc {
  ATR   excatr;    
  FP    exchdr;    
   
} T_DEXC;

 



 



ER get_ver(
  T_VER *pk_ver
);

 



ER ref_sys(
  T_RSYS *pk_rsys
);

 



ER ref_cfg(
  T_RCFG *pk_rcfg
);

 



ER def_svc(
  FN s_fncd,
  T_DSVC *pk_dsvc
);

 



ER def_exc(
  UINT exckind,
  T_DEXC *pk_dexc
);









 

# 38 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/network.h" 1 3
 

















 






 



 



ER nrea_dat(
  INT *p_reasz,
  VP dstadr,
  NODE srcnode,
  VP srcadr,
  INT datsz
);

 



ER nwri_dat(
  INT *p_wrisz,
  NODE dstnode,
  VP dstadr,
  VP srcadr,
  INT datsz
);

 



ER nget_nod(
  NODE *p_node
);

 



ER nget_ver(
  T_VER *pk_ver,
  NODE node
);







 

# 39 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/port.h" 1 3
 

















 



typedef struct t_cpor {
  VP    exinf;      
  ATR   poratr;     
  INT   maxcmsz;    
  INT   maxrmsz;    
   
} T_CPOR;

 





 




 



typedef struct t_rpor {
  VP        exinf;    
  BOOL_ID   wtsk;     
                      
  BOOL_ID   atsk;     
                      
   
} T_RPOR;

 



 



ER cre_por(
  ID porid,
  T_CPOR *pk_cpor
);

 



ER del_por(
  ID porid
);

 



ER cal_por(
  VP msg,
  INT *p_rmsgsz,
  ID porid,
  UINT calptn,
  INT cmsgsz
);

 



ER pcal_por(
  VP msg,
  INT *p_rmsgsz,
  ID porid,
  UINT calptn,
  INT cmsgsz
);

 



ER tcal_por(
  VP msg,
  INT *p_rmsgsz,
  ID porid,
  UINT calptn,
  INT cmsgsz,
  TMO tmout
);

 



ER acp_por(
  RNO *p_rdvno,
  VP msg,
  INT *p_cmsgsz,
  ID porid,
  UINT acpptn
);

 



ER pacp_por(
  RNO *p_rdvno,
  VP msg,
  INT *p_cmsgsz,
  ID porid,
  UINT acpptn
);

 



ER tacp_por(
  RNO *p_rdvno,
  VP msg,
  INT *p_cmsgsz,
  ID porid,
  UINT acpptn,
  TMO tmout
);

 



ER fwd_por(
  ID porid,
  UINT calptn,
  RNO rdvno,
  VP msg,
  INT cmsgsz
);

 



ER rpl_rdv(
  RNO rdvno,
  VP msg,
  INT rmsgsz
);

 



ER ref_por(
  T_RPOR *pk_rpor,
  ID porid
);









 

# 40 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/semaphore.h" 1 3
 

















 



typedef struct t_csem {
  VP    exinf;     
  ATR   sematr;    
   
  INT   isemcnt;    
  INT   maxsem;     
   
} T_CSEM;

 








 



typedef struct t_rsem {
  VP      exinf;     
  BOOL_ID wtsk;      
  INT     semcnt;    
   
} T_RSEM;

 



 



ER cre_sem(
  ID semid,
  T_CSEM *pk_csem
);

 



ER del_sem(
  ID semid
);

 



ER sig_sem(
  ID semid
);

 



ER wai_sem(
  ID semid
);

 



ER preq_sem(
  ID semid
);

 



ER twai_sem(
  ID semid,
  TMO tmout
);

 



ER ref_sem(
  ID      semid,
  T_RSEM *pk_rsem
);






 

# 41 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/task.h" 1 3
 

















 



typedef struct t_ctsk {
  VP    exinf;      
  ATR   tskatr;     
  FP    task;       
  PRI   itskpri;    
  INT   stksz;      
   
} T_CTSK;

 














 





 






 




                        

                        


 



typedef struct t_rtsk {
  VP     exinf;      
  PRI    tskpri;     
  UINT   tskstat;    
   



  UINT   tskwait;    
  ID     wid;        
  INT    wupcnt;     
  INT    suscnt;     
  ATR    tskatr;     
  FP     task;       
  PRI    itskpri;    
  INT    stksz;      
} T_RTSK;

 











 

















 





 



 



ER cre_tsk(
  ID tskid,
  T_CTSK *pk_ctsk
);

 



ER del_tsk(
  ID tskid
);

 



ER sta_tsk(
  ID tskid,
  INT stacd
);

 



void ext_tsk( void );

 



void exd_tsk( void );

 



ER ter_tsk(
  ID tskid
);

 



ER dis_dsp( void );

 



ER ena_dsp( void );

 



ER chg_pri(
  ID tskid,
  PRI tskpri
);

 



ER rot_rdq(
  PRI tskpri
);

 



ER rel_wai(
  ID tskid
);

 



ER get_tid(
  ID *p_tskid
);

 



ER ref_tsk(
  T_RTSK *pk_rtsk,
  ID tskid
);


 



 



ER sus_tsk(
  ID tskid
);

 



ER rsm_tsk(
  ID tskid
);

 



ER frsm_tsk(
  ID tskid
);

 



ER slp_tsk( void );

 



ER tslp_tsk(
  TMO tmout
);

 



ER wup_tsk(
  ID tskid
);

 



ER can_wup(
  INT *p_wupcnt,
  ID tskid
);






 

# 42 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/time.h" 1 3
 

















 







typedef struct t_systime {
  H    utime;    
  UW   ltime;    
} SYSTIME, CYCTIME, ALMTIME;

 





typedef int DLYTIME;

 



typedef struct t_dcyc {
  VP        exinf;     
  ATR       cycatr;    
  FP        cychdr;    
  UINT      cycact;    
  CYCTIME   cyctim;    
} T_DCYC;

 







 



typedef struct t_rcyc {
  VP        exinf;     
  CYCTIME   lfttim;    
  UINT      cycact;    
   
} T_RCYC;

 



typedef struct t_dalm {
  VP        exinf;     
  ATR       almatr;    
  FP        almhdr;    
  UINT      tmmode;    
  ALMTIME   almtim;    
} T_DALM;

 






 



typedef struct t_ralm {
  VP        exinf;     
  ALMTIME   lfttim;    
   
} T_RALM;

 



 



ER set_tim(
  SYSTIME *pk_tim
);

 



ER get_tim(
  SYSTIME *pk_tim
);

 



ER dly_tsk(
  DLYTIME dlytim
);

 



ER def_cyc(
  HNO cycno,
  T_DCYC *pk_dcyc
);

 



ER act_cyc(
  HNO cycno,
  UINT cycact
);

 



ER ref_cyc(
  T_RCYC *pk_rcyc,
  HNO cycno
);

 



ER def_alm(
  HNO almno,
  T_DALM *pk_dalm
);

 



ER ref_alm(
  T_RALM *pk_ralm,
  HNO almno
);

 



void ret_tmr( void );






 

# 43 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/itronsys/vmempool.h" 1 3
 

















 



typedef struct t_cmpl {
  VP    exinf;     
  ATR   mplatr;    
  INT   mplsz;     
   
} T_CMPL;

 






 





 



typedef struct t_rmpl {
  VP        exinf;     
  BOOL_ID   wtsk;      
  INT       frsz;      
  INT       maxsz;     
   
} T_RMPL;

 



 



ER cre_mpl(
  ID mplid,
  T_CMPL *pk_cmpl
);

 



ER del_mpl(
  ID mplid
);

 



ER get_blk(
  VP *p_blk,
  ID mplid,
  INT blksz
);

 



ER pget_blk(
  VP *p_blk,
  ID mplid,
  INT blksz
);

 



ER tget_blk(
  VP *p_blk,
  ID mplid,
  INT blksz,
  TMO tmout
);

 



ER rel_blk(
  ID mplid,
  VP blk
);

 



ER ref_mpl(
  T_RMPL *pk_rmpl,
  ID mplid
);







 

# 44 "/usr/local/rtems/mrm332/lib/include/itron.h" 2 3







 

# 49 "/usr/local/rtems/mrm332/lib/include/rtems/config.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/config.h" 1 3
 





















 










 




typedef struct {
  ID          id;
  T_CTSK      attributes;
} itron_initialization_tasks_table;

typedef struct {
  int                                 maximum_tasks;
  int                                 maximum_semaphores;
  int                                 maximum_eventflags;
  int                                 maximum_mailboxes;
  int                                 maximum_message_buffers;
  int                                 maximum_ports;
  int                                 maximum_memory_pools;
  int                                 maximum_fixed_memory_pools;
  int                                 number_of_initialization_tasks;
  itron_initialization_tasks_table   *User_initialization_tasks_table;
} itron_api_configuration_table;






 
# 50 "/usr/local/rtems/mrm332/lib/include/rtems/config.h" 2 3





# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/config.h" 1 3
 






















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/tasks.h" 1 3
 







































# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/states.h" 1 3
 




















 




typedef unsigned32 States_Control;

 





















































 
# 41 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/tasks.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/thread.h" 1 3
 





















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/context.h" 1 3
 






















 






 





extern  volatile boolean _Context_Switch_necessary;

 













 











 











 












 











 













 
















 
# 23 "/usr/local/rtems/mrm332/lib/include/rtems/score/thread.h" 2 3







# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/stack.h" 1 3
 






















 






 



typedef struct {
  unsigned32  size;         
  void       *area;         
}   Stack_Control;










 
# 30 "/usr/local/rtems/mrm332/lib/include/rtems/score/thread.h" 2 3



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/tqdata.h" 1 3
 

























 




typedef enum {
  THREAD_QUEUE_DISCIPLINE_FIFO,      
  THREAD_QUEUE_DISCIPLINE_PRIORITY   
}   Thread_queue_Disciplines;

 



 
typedef enum {
  THREAD_QUEUE_SYNCHRONIZED,
  THREAD_QUEUE_NOTHING_HAPPENED,
  THREAD_QUEUE_TIMEOUT,
  THREAD_QUEUE_SATISFIED
}  Thread_queue_States;

 


















typedef struct {
  union {
    Chain_Control Fifo;                 
    Chain_Control Priority[4 ];
                                        
  } Queues;
  Thread_queue_States      sync_state;  
  Thread_queue_Disciplines discipline;  
  States_Control           state;       
  unsigned32               timeout_status;
}   Thread_queue_Control;










 
# 33 "/usr/local/rtems/mrm332/lib/include/rtems/score/thread.h" 2 3



 








typedef void *Thread;

 







typedef enum {
  THREAD_START_NUMERIC,
  THREAD_START_POINTER,
  THREAD_START_BOTH_POINTER_FIRST,
  THREAD_START_BOTH_NUMERIC_FIRST
} Thread_Start_types;

typedef Thread ( *Thread_Entry )();    

typedef Thread ( *Thread_Entry_numeric )( unsigned32 );
typedef Thread ( *Thread_Entry_pointer )( void * );
typedef Thread ( *Thread_Entry_both_pointer_first )( void *, unsigned32 );
typedef Thread ( *Thread_Entry_both_numeric_first )( unsigned32, void * );

 







typedef enum {
  THREAD_CPU_BUDGET_ALGORITHM_NONE,
  THREAD_CPU_BUDGET_ALGORITHM_RESET_TIMESLICE,
  THREAD_CPU_BUDGET_ALGORITHM_EXHAUST_TIMESLICE,
  THREAD_CPU_BUDGET_ALGORITHM_CALLOUT
}  Thread_CPU_budget_algorithms;

typedef struct Thread_Control_struct Thread_Control;

typedef void (*Thread_CPU_budget_algorithm_callout )( Thread_Control * );

 



struct rtems_task_variable_tt;

struct rtems_task_variable_tt {
  struct rtems_task_variable_tt  *next;
  void                          **ptr;
  void                           *gval;
  void                           *tval;
  void                          (*dtor)(void *);
};

typedef struct rtems_task_variable_tt   rtems_task_variable_t;

 




typedef struct {
  Thread_Entry         entry_point;       
  Thread_Start_types   prototype;         
  void                *pointer_argument;  
  unsigned32           numeric_argument;  
                                          
  boolean              is_preemptible;
  Thread_CPU_budget_algorithms          budget_algorithm;
  Thread_CPU_budget_algorithm_callout   budget_callout;
  unsigned32           isr_level;
  Priority_Control     initial_priority;  
  boolean              core_allocated_stack;
  Stack_Control        Initial_stack;     
  void                *fp_context;        
  void                *stack;             
}   Thread_Start_information;

 






typedef struct {
  Objects_Id            id;               
  unsigned32            count;            
  void                 *return_argument;  
  void                 *return_argument_1;
  unsigned32            option;

   



  unsigned32            return_code;      

  Chain_Control         Block2n;          
  Thread_queue_Control *queue;            
}   Thread_Wait_information;

 







typedef struct {
  Objects_Control          Object;
  States_Control           current_state;
  Priority_Control         current_priority;
  Priority_Control         real_priority;
  unsigned32               resource_count;
  Thread_Wait_information  Wait;
  Watchdog_Control         Timer;



      
  Chain_Node               Active;
}   Thread_Proxy_control;


 







typedef enum {
  THREAD_API_RTEMS,
  THREAD_API_POSIX,
  THREAD_API_ITRON
}  Thread_APIs;




struct Thread_Control_struct {
  Objects_Control                       Object;
  States_Control                        current_state;
  Priority_Control                      current_priority;
  Priority_Control                      real_priority;
  unsigned32                            resource_count;
  Thread_Wait_information               Wait;
  Watchdog_Control                      Timer;



      
  unsigned32                            suspend_count;
  boolean                               is_global;
  boolean                               do_post_task_switch_extension;

  boolean                               is_preemptible;
  void                                 *rtems_ada_self;
  unsigned32                            cpu_time_budget;
  Thread_CPU_budget_algorithms          budget_algorithm;
  Thread_CPU_budget_algorithm_callout   budget_callout;

  unsigned32                            ticks_executed;
  Chain_Control                        *ready;
  Priority_Information                  Priority_map;
  Thread_Start_information              Start;
  Context_Control                       Registers;
  void                                 *fp_context;
  void                                 *API_Extensions[ THREAD_API_ITRON  + 1 ];
  void                                **extensions;
  rtems_task_variable_t                *task_variables;
};

 



extern  void *rtems_ada_self;
 
 



 
extern  Objects_Information _Thread_Internal_information;
 
 



 
extern  Thread_Control *_Thread_Idle;

 






 
extern  Context_Control _Thread_BSP_context;
 
 





extern  volatile unsigned32 _Thread_Dispatch_disable_level;

 




extern  unsigned32 _Thread_Do_post_task_switch_extension;

 





extern  unsigned32 _Thread_Maximum_extensions;

 



extern  unsigned32 _Thread_Ticks_per_timeslice;

 




extern  Chain_Control *_Thread_Ready_chain;

 




extern  Thread_Control *_Thread_Executing;

 






extern  Thread_Control *_Thread_Heir;

 




extern  Thread_Control *_Thread_Allocated_fp;

 







void _Thread_Handler_initialization (
  unsigned32   ticks_per_timeslice,
  unsigned32   maximum_extensions,
  unsigned32   maximum_proxies
);

 








 
void _Thread_Create_idle( void );

 









void _Thread_Start_multitasking( void );

 













void _Thread_Dispatch( void );

 













unsigned32 _Thread_Stack_Allocate(
  Thread_Control *the_thread,
  unsigned32 stack_size
);

 









void _Thread_Stack_Free(
  Thread_Control *the_thread
);

 

















boolean _Thread_Initialize(
  Objects_Information                  *information,
  Thread_Control                       *the_thread,
  void                                 *stack_area,
  unsigned32                            stack_size,
  boolean                               is_fp,
  Priority_Control                      priority,
  boolean                               is_preemptible,
  Thread_CPU_budget_algorithms          budget_algorithm,
  Thread_CPU_budget_algorithm_callout   budget_callout,
  unsigned32                            isr_level,
  Objects_Name                          name
);

 








 
boolean _Thread_Start(
  Thread_Control           *the_thread,
  Thread_Start_types        the_prototype,
  void                     *entry_point,
  void                     *pointer_argument,
  unsigned32                numeric_argument
);

 








 
 
 
boolean _Thread_Restart(
  Thread_Control           *the_thread,
  void                     *pointer_argument,
  unsigned32                numeric_argument
);

 







 
void _Thread_Reset(
  Thread_Control      *the_thread,
  void                *pointer_argument,
  unsigned32           numeric_argument
);

 








 
void _Thread_Close(
  Objects_Information  *information,
  Thread_Control       *the_thread
);

 









void _Thread_Ready(
  Thread_Control *the_thread
);

 









void _Thread_Clear_state(
  Thread_Control *the_thread,
  States_Control  state
);

 










void _Thread_Set_state(
  Thread_Control *the_thread,
  States_Control  state
);

 









void _Thread_Set_transient(
  Thread_Control *the_thread
);

 












void _Thread_Reset_timeslice( void );

 









void _Thread_Tickle_timeslice( void );

 









void _Thread_Yield_processor( void );

 









void _Thread_Rotate_Ready_Queue(
  Priority_Control  priority
);

 








void _Thread_Load_environment(
  Thread_Control *the_thread
);

 











void _Thread_Handler( void );

 








void _Thread_Delay_ended(
  Objects_Id  id,
  void       *ignored
);

 









void _Thread_Change_priority (
  Thread_Control   *the_thread,
  Priority_Control  new_priority,
  boolean           prepend_it
);

 








void _Thread_Set_priority(
  Thread_Control   *the_thread,
  Priority_Control  new_priority
);

 








void _Thread_Suspend(
  Thread_Control   *the_thread
);

 









void _Thread_Resume(
  Thread_Control   *the_thread,
  boolean           force
);

 










boolean _Thread_Evaluate_mode( void );

 





 







 






 

Thread _Thread_Idle_body(
  unsigned32 ignored
);














 
# 42 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/tasks.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/eventset.h" 1 3
 






















 



typedef unsigned32 rtems_event_set;

 









































 















 
# 44 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/tasks.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/asr.h" 1 3
 
























 





typedef unsigned32 rtems_signal_set;

 



typedef void rtems_asr;

 




typedef rtems_asr ( *rtems_asr_entry )(
                 rtems_signal_set
             );

 





typedef struct {
  boolean           is_enabled;        
  rtems_asr_entry   handler;           
  Modes_Control     mode_set;          
  rtems_signal_set  signals_posted;    
  rtems_signal_set  signals_pending;   
  unsigned32        nest_level;        
}   ASR_Information;

 














































 
# 45 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/tasks.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/attr.h" 1 3
 





















 

typedef unsigned32 rtems_attribute;

 







































 





















 
# 46 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/tasks.h" 2 3



 





 






 



typedef Priority_Control rtems_task_priority;






 






 


 


















 


 



typedef Thread_Control rtems_tcb;

 


 
typedef void rtems_task;

 


 
typedef unsigned32 rtems_task_argument;

 


 
typedef rtems_task ( *rtems_task_entry )(
                      rtems_task_argument
                   );
 
 





 
typedef struct {
  rtems_name            name;               
  unsigned32            stack_size;         
  rtems_task_priority   initial_priority;   
  rtems_attribute       attribute_set;      
  rtems_task_entry      entry_point;        
  rtems_mode            mode_set;           
  unsigned32            argument;           
} rtems_initialization_tasks_table;

 




 
typedef struct {
  unsigned32               Notepads[ (15  +1)  ];
  rtems_event_set          pending_events;
  rtems_event_set          event_condition;
  ASR_Information          Signal;
}  RTEMS_API_Control;

 




extern  Objects_Information _RTEMS_tasks_Information;

 



extern  rtems_initialization_tasks_table 
               *_RTEMS_tasks_User_initialization_tasks;
extern  unsigned32   _RTEMS_tasks_Number_of_initialization_tasks;

 






 
void _RTEMS_tasks_Manager_initialization(
  unsigned32                        maximum_tasks,
  unsigned32                        number_of_initialization_tasks,
  rtems_initialization_tasks_table *user_tasks
);

 












rtems_status_code rtems_task_create(
  rtems_name           name,
  rtems_task_priority  initial_priority,
  unsigned32           stack_size,
  rtems_mode           initial_modes,
  rtems_attribute      attribute_set,
  Objects_Id          *id
);

 













rtems_status_code rtems_task_ident(
  rtems_name    name,
  unsigned32    node,
  Objects_Id   *id
);

 








rtems_status_code rtems_task_delete(
  Objects_Id id
);

 









rtems_status_code rtems_task_get_note(
  Objects_Id  id,
  unsigned32  notepad,
  unsigned32 *note
);

 









rtems_status_code rtems_task_set_note(
  Objects_Id id,
  unsigned32 notepad,
  unsigned32 note
);

 










rtems_status_code rtems_task_mode(
  rtems_mode  mode_set,
  rtems_mode  mask,
  rtems_mode *previous_mode_set
);

 









rtems_status_code rtems_task_restart(
  Objects_Id id,
  unsigned32 arg
);

 








rtems_status_code rtems_task_suspend(
  Objects_Id id
);

 








rtems_status_code rtems_task_resume(
  Objects_Id id
);

 










rtems_status_code rtems_task_set_priority(
  Objects_Id           id,
  rtems_task_priority  new_priority,
  rtems_task_priority *old_priority
);

 









rtems_status_code rtems_task_start(
  Objects_Id   id,
  rtems_task_entry entry_point,
  unsigned32   argument
);

 









rtems_status_code rtems_task_wake_when(
  rtems_time_of_day *time_buffer
);

 









rtems_status_code rtems_task_wake_after(
  rtems_interval  ticks
);

 






rtems_status_code rtems_task_is_suspended(
  Objects_Id id
);

 





rtems_status_code rtems_task_variable_add(
  rtems_id  tid,
  void    **ptr,
  void    (*dtor)(void *)
);

 





rtems_status_code rtems_task_variable_get(
  rtems_id tid,
  void **ptr,
  void **result
);

 





rtems_status_code rtems_task_variable_delete(
  rtems_id  tid,
  void    **ptr
);

 









 
void _RTEMS_tasks_Initialize_user_tasks( void );













 
# 24 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/config.h" 2 3


 








typedef struct {
  unsigned32                        maximum_tasks;
  unsigned32                        maximum_timers;
  unsigned32                        maximum_semaphores;
  unsigned32                        maximum_message_queues;
  unsigned32                        maximum_partitions;
  unsigned32                        maximum_regions;
  unsigned32                        maximum_ports;
  unsigned32                        maximum_periods;
  unsigned32                        number_of_initialization_tasks;
  rtems_initialization_tasks_table *User_initialization_tasks_table;
} rtems_api_configuration_table;






 
# 55 "/usr/local/rtems/mrm332/lib/include/rtems/config.h" 2 3


 





# 1 "/usr/local/rtems/mrm332/lib/include/rtems/extension.h" 1 3
 





























# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/userext.h" 1 3
 






















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/interr.h" 1 3
 






















 




typedef enum {
  INTERNAL_ERROR_CORE,
  INTERNAL_ERROR_RTEMS_API,
  INTERNAL_ERROR_POSIX_API,
  INTERNAL_ERROR_ITRON_API
} Internal_errors_Source;

 



typedef enum {
  INTERNAL_ERROR_NO_CONFIGURATION_TABLE,
  INTERNAL_ERROR_NO_CPU_TABLE,
  INTERNAL_ERROR_INVALID_WORKSPACE_ADDRESS,
  INTERNAL_ERROR_TOO_LITTLE_WORKSPACE,
  INTERNAL_ERROR_WORKSPACE_ALLOCATION,
  INTERNAL_ERROR_INTERRUPT_STACK_TOO_SMALL,
  INTERNAL_ERROR_THREAD_EXITTED,
  INTERNAL_ERROR_INCONSISTENT_MP_INFORMATION,
  INTERNAL_ERROR_INVALID_NODE,
  INTERNAL_ERROR_NO_MPCI,
  INTERNAL_ERROR_BAD_PACKET,
  INTERNAL_ERROR_OUT_OF_PACKETS,
  INTERNAL_ERROR_OUT_OF_GLOBAL_OBJECTS,
  INTERNAL_ERROR_OUT_OF_PROXIES,
  INTERNAL_ERROR_INVALID_GLOBAL_ID,
  INTERNAL_ERROR_BAD_STACK_HOOK,
  INTERNAL_ERROR_BAD_ATTRIBUTES
} Internal_errors_Core_list;

 


 
typedef struct {
  Internal_errors_Source  the_source;
  boolean                 is_internal;
  unsigned32              the_error;
} Internal_errors_Information;

 



extern  Internal_errors_Information Internal_errors_What_happened;

 








void volatile _Internal_error_Occurred(
  Internal_errors_Source  the_source,
  boolean                 is_internal,
  unsigned32              the_error
);






 
# 24 "/usr/local/rtems/mrm332/lib/include/rtems/score/userext.h" 2 3




 





 
typedef void User_extensions_routine;
 
typedef boolean ( *User_extensions_thread_create_extension )(
                 Thread_Control *,
                 Thread_Control *
             );
 
typedef User_extensions_routine ( *User_extensions_thread_delete_extension )(
                 Thread_Control *,
                 Thread_Control *
             );
 
typedef User_extensions_routine ( *User_extensions_thread_start_extension )(
                 Thread_Control *,
                 Thread_Control *
             );
 
typedef User_extensions_routine ( *User_extensions_thread_restart_extension )(
                 Thread_Control *,
                 Thread_Control *
             );
 
typedef User_extensions_routine ( *User_extensions_thread_switch_extension )(
                 Thread_Control *,
                 Thread_Control *
             );
 
typedef User_extensions_routine (
                                *User_extensions_thread_post_switch_extension )(
                 Thread_Control *
             );
 
typedef User_extensions_routine ( *User_extensions_thread_begin_extension )(
                 Thread_Control *
             );
 
typedef User_extensions_routine ( *User_extensions_thread_exitted_extension )(
                 Thread_Control *
             );
 
typedef User_extensions_routine ( *User_extensions_fatal_extension )(
                 Internal_errors_Source   ,
                 boolean                  ,
                 unsigned32               
             );

 
typedef struct {
  User_extensions_thread_create_extension       thread_create;
  User_extensions_thread_start_extension        thread_start;
  User_extensions_thread_restart_extension      thread_restart;
  User_extensions_thread_delete_extension       thread_delete;
  User_extensions_thread_switch_extension       thread_switch;
  User_extensions_thread_begin_extension        thread_begin;
  User_extensions_thread_exitted_extension      thread_exitted;
  User_extensions_fatal_extension               fatal;
}   User_extensions_Table;

 



typedef struct {
  Chain_Node              Node;
  User_extensions_Table   Callouts;
}   User_extensions_Control;

 



extern  Chain_Control _User_extensions_List;

 








boolean _User_extensions_Thread_create (
  Thread_Control *the_thread
);

 








void _User_extensions_Thread_delete (
  Thread_Control *the_thread
);

 








void _User_extensions_Thread_start (
  Thread_Control *the_thread
);

 








void _User_extensions_Thread_restart (
  Thread_Control *the_thread
);

 








void _User_extensions_Thread_begin (
  Thread_Control *executing
);

 








void _User_extensions_Thread_exitted (
  Thread_Control *executing
);

 








void _User_extensions_Fatal (
  Internal_errors_Source  the_source,
  boolean                 is_internal,
  unsigned32              the_error
);










 
# 31 "/usr/local/rtems/mrm332/lib/include/rtems/extension.h" 2 3




 



typedef User_extensions_routine                   rtems_extension;
typedef User_extensions_thread_create_extension   rtems_task_create_extension;
typedef User_extensions_thread_delete_extension   rtems_task_delete_extension;
typedef User_extensions_thread_start_extension    rtems_task_start_extension;
typedef User_extensions_thread_restart_extension  rtems_task_restart_extension;
typedef User_extensions_thread_switch_extension   rtems_task_switch_extension;
typedef User_extensions_thread_post_switch_extension
                                              rtems_task_post_switch_extension;
typedef User_extensions_thread_begin_extension    rtems_task_begin_extension;
typedef User_extensions_thread_exitted_extension  rtems_task_exitted_extension;
typedef User_extensions_fatal_extension           rtems_fatal_extension;

typedef User_extensions_Table                     rtems_extensions_table;

 




extern  Objects_Information  _Extension_Information;

 




typedef struct {
  Objects_Control          Object;
  User_extensions_Control  Extension;
}   Extension_Control;

 







void _Extension_Manager_initialization(
  unsigned32 maximum_extensions
);

 










rtems_status_code rtems_extension_create(
  rtems_name              name,
  rtems_extensions_table *extension_table,
  Objects_Id              *id
);

 










rtems_status_code rtems_extension_ident(
  rtems_name    name,
  Objects_Id   *id
);

 








rtems_status_code rtems_extension_delete(
  Objects_Id id
);










 
# 63 "/usr/local/rtems/mrm332/lib/include/rtems/config.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/io.h" 1 3
 


































 










 
typedef unsigned32 rtems_device_major_number;
typedef unsigned32 rtems_device_minor_number;
 
typedef rtems_status_code rtems_device_driver;
 
typedef rtems_device_driver ( *rtems_device_driver_entry )(
                 rtems_device_major_number,
                 rtems_device_minor_number,
                 void *
             );

typedef struct {
  rtems_device_driver_entry initialization;  
  rtems_device_driver_entry open;            
  rtems_device_driver_entry close;           
  rtems_device_driver_entry read;            
  rtems_device_driver_entry write;           
  rtems_device_driver_entry control;         
}   rtems_driver_address_table;
 
 



typedef struct {
    char                     *device_name;
    unsigned32                device_name_length;
    rtems_device_major_number major;
    rtems_device_minor_number minor;
} rtems_driver_name_t;

 



 




extern  unsigned32                  _IO_Number_of_drivers;
extern  rtems_driver_address_table *_IO_Driver_address_table;
extern  unsigned32                  _IO_Number_of_devices;
extern  rtems_driver_name_t        *_IO_Driver_name_table;

 







void _IO_Manager_initialization(
  rtems_driver_address_table *driver_table,
  unsigned32                  number_of_drivers,
  unsigned32                  number_of_devices
);

 








rtems_status_code rtems_io_register_name(
    char                      *device_name,
    rtems_device_major_number  major,
    rtems_device_minor_number  minor
);


 







rtems_status_code rtems_io_lookup_name(
    const char           *name,
    rtems_driver_name_t **device_info
);


 








rtems_status_code rtems_io_initialize(
  rtems_device_major_number  major,
  rtems_device_minor_number  minor,
  void                      *argument
);

 








rtems_status_code rtems_io_open(
  rtems_device_major_number  major,
  rtems_device_minor_number  minor,
  void                      *argument
);

 








rtems_status_code rtems_io_close(
  rtems_device_major_number  major,
  rtems_device_minor_number  minor,
  void                      *argument
);

 








rtems_status_code rtems_io_read(
  rtems_device_major_number  major,
  rtems_device_minor_number  minor,
  void                      *argument
);

 








rtems_status_code rtems_io_write(
  rtems_device_major_number  major,
  rtems_device_minor_number  minor,
  void                      *argument
);

 








rtems_status_code rtems_io_control(
  rtems_device_major_number  major,
  rtems_device_minor_number  minor,
  void                      *argument
);

 








void _IO_Initialize_all_drivers( void );






 
# 64 "/usr/local/rtems/mrm332/lib/include/rtems/config.h" 2 3





 






typedef struct {
  unsigned32    node;                    
  unsigned32    maximum_nodes;           
  unsigned32    maximum_global_objects;  
  unsigned32    maximum_proxies;         



  void         *User_mpci_table;         

} rtems_multiprocessing_table;

 











typedef struct {
  void                             *work_space_start;
  unsigned32                        work_space_size;
  unsigned32                        maximum_extensions;
  unsigned32                        microseconds_per_tick;
  unsigned32                        ticks_per_timeslice;
  unsigned32                        maximum_devices;
  unsigned32                        number_of_device_drivers;
  rtems_driver_address_table       *Device_driver_table;
  unsigned32                        number_of_initial_extensions;
  rtems_extensions_table           *User_extension_table;
  rtems_multiprocessing_table      *User_multiprocessing_table;
  rtems_api_configuration_table    *RTEMS_api_configuration;
  posix_api_configuration_table    *POSIX_api_configuration;
  itron_api_configuration_table    *ITRON_api_configuration;
} rtems_configuration_table;

 




extern  rtems_configuration_table    *_Configuration_Table;
extern  rtems_multiprocessing_table  *_Configuration_MP_table;

 
























































 
# 41 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/init.h" 1 3
 
































# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/intr.h" 1 3
 























 



typedef ISR_Level rtems_interrupt_level;

 



 
typedef ISR_Vector_number rtems_vector_number;

 


 
typedef void rtems_isr;

 


 
typedef rtems_isr ( *rtems_isr_entry )(
                 rtems_vector_number
             );

 








void _Interrupt_Manager_initialization( void );

 










rtems_status_code rtems_interrupt_catch(
  rtems_isr_entry      new_isr_handler,
  rtems_vector_number  vector,
  rtems_isr_entry     *old_isr_handler
);

 










        
 










        
 











 









 



 











 
















 
# 34 "/usr/local/rtems/mrm332/lib/include/rtems/init.h" 2 3


 




extern const rtems_multiprocessing_table
  _Initialization_Default_multiprocessing_table;

 









void rtems_initialize_executive(
  rtems_configuration_table *configuration_table,
  rtems_cpu_table           *cpu_table
);

 









rtems_interrupt_level rtems_initialize_executive_early(
  rtems_configuration_table *configuration_table,
  rtems_cpu_table           *cpu_table
);

 









void rtems_initialize_executive_late(
  rtems_interrupt_level bsp_level
);

 











void rtems_shutdown_executive(
  unsigned32 result
);






 
# 42 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/clock.h" 1 3
 
































 



typedef enum {
  RTEMS_CLOCK_GET_TOD,
  RTEMS_CLOCK_GET_SECONDS_SINCE_EPOCH,
  RTEMS_CLOCK_GET_TICKS_SINCE_BOOT,
  RTEMS_CLOCK_GET_TICKS_PER_SECOND,
  RTEMS_CLOCK_GET_TIME_VALUE
} rtems_clock_get_options;

 



typedef struct {
  unsigned32  seconds;
  unsigned32  microseconds;
} rtems_clock_time_value;

 












rtems_status_code rtems_clock_get(
  rtems_clock_get_options  option,
  void              *time_buffer
);

 








rtems_status_code rtems_clock_set(
  rtems_time_of_day *time_buffer
);

 








rtems_status_code rtems_clock_tick( void );






 
# 45 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/timer.h" 1 3
 





































 




typedef enum {
  TIMER_INTERVAL,
  TIMER_TIME_OF_DAY,
  TIMER_DORMANT
} Timer_Classes;

 


 
typedef void rtems_timer_service_routine;
 
typedef rtems_timer_service_routine ( *rtems_timer_service_routine_entry )(
                 rtems_id,
                 void *
             );

 




extern  Objects_Information  _Timer_Information;

 




typedef struct {
  Objects_Control  Object;
  Watchdog_Control Ticker;
  Timer_Classes    the_class;
}   Timer_Control;

 







void _Timer_Manager_initialization(
  unsigned32 maximum_timers
);

 









rtems_status_code rtems_timer_create(
  rtems_name    name,
  Objects_Id   *id
);

 










rtems_status_code rtems_timer_ident(
  rtems_name    name,
  Objects_Id   *id
);

 








rtems_status_code rtems_timer_cancel(
  Objects_Id id
);

 








rtems_status_code rtems_timer_delete(
  Objects_Id id
);

 









rtems_status_code rtems_timer_fire_after(
  Objects_Id                         id,
  rtems_interval                     ticks,
  rtems_timer_service_routine_entry  routine,
  void                              *user_data
);

 









rtems_status_code rtems_timer_fire_when(
  Objects_Id                          id,
  rtems_time_of_day                  *wall_time,
  rtems_timer_service_routine_entry   routine,
  void                               *user_data
);

 










rtems_status_code rtems_timer_reset(
  Objects_Id id
);










 
# 47 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/sem.h" 1 3
 
































# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/support.h" 1 3
 























 












 


 
 







 


 
 







 


 
 







 



 



















 
# 34 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/sem.h" 2 3



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/coremutex.h" 1 3
 















 


 





# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/threadq.h" 1 3
 



























 


 


 




typedef void ( *Thread_queue_Flush_callout )(
                 Thread_Control *
             );

 




 
typedef void ( *Thread_queue_Extract_callout )(
                 Thread_Control *
             );

extern  Thread_queue_Extract_callout  
  _Thread_queue_Extract_table[ OBJECTS_ITRON_FIXED_MEMORY_POOLS  + 1 ];

 










Thread_Control *_Thread_queue_Dequeue(
  Thread_queue_Control *the_thread_queue
);

 








void _Thread_queue_Enqueue(
  Thread_queue_Control *the_thread_queue,
  Watchdog_Interval     timeout
);

 








void _Thread_queue_Extract(
  Thread_queue_Control *the_thread_queue,
  Thread_Control       *the_thread
);

 








 
boolean _Thread_queue_Extract_with_proxy(
  Thread_Control       *the_thread
);

 









Thread_Control *_Thread_queue_First(
  Thread_queue_Control *the_thread_queue
);

 








void _Thread_queue_Flush(
  Thread_queue_Control       *the_thread_queue,
  Thread_queue_Flush_callout  remote_extract_callout,
  unsigned32                  status
);

 









void _Thread_queue_Initialize(
  Thread_queue_Control         *the_thread_queue,
  Objects_Classes               the_class,
  Thread_queue_Disciplines      the_discipline,
  States_Control                state,
  Thread_queue_Extract_callout  proxy_extract_callout,
  unsigned32                    timeout_status
);

 









Thread_Control *_Thread_queue_Dequeue_priority(
  Thread_queue_Control *the_thread_queue
);

 









void _Thread_queue_Enqueue_priority(
  Thread_queue_Control *the_thread_queue,
  Thread_Control       *the_thread,
  Watchdog_Interval     timeout
);

 








void _Thread_queue_Extract_priority(
  Thread_queue_Control *the_thread_queue,
  Thread_Control       *the_thread
);

 









Thread_Control *_Thread_queue_First_priority(
  Thread_queue_Control *the_thread_queue
);

 









Thread_Control *_Thread_queue_Dequeue_fifo(
  Thread_queue_Control *the_thread_queue
);

 









void _Thread_queue_Enqueue_fifo(
  Thread_queue_Control *the_thread_queue,
  Thread_Control       *the_thread,
  Watchdog_Interval     timeout
);

 








void _Thread_queue_Extract_fifo(
  Thread_queue_Control *the_thread_queue,
  Thread_Control       *the_thread
);

 









Thread_Control *_Thread_queue_First_fifo(
  Thread_queue_Control *the_thread_queue
);

 











void _Thread_queue_Timeout (
  Objects_Id  id,
  void       *ignored
);






 
# 26 "/usr/local/rtems/mrm332/lib/include/rtems/score/coremutex.h" 2 3



 
 



 
typedef void ( *CORE_mutex_API_mp_support_callout )(
                 Thread_Control *,
                 Objects_Id
             );

 



typedef enum {
  CORE_MUTEX_DISCIPLINES_FIFO,
  CORE_MUTEX_DISCIPLINES_PRIORITY,
  CORE_MUTEX_DISCIPLINES_PRIORITY_INHERIT,
  CORE_MUTEX_DISCIPLINES_PRIORITY_CEILING
}   CORE_mutex_Disciplines;

 


 
typedef enum {
  CORE_MUTEX_STATUS_SUCCESSFUL,
  CORE_MUTEX_STATUS_UNSATISFIED_NOWAIT,
  CORE_MUTEX_STATUS_NESTING_NOT_ALLOWED,
  CORE_MUTEX_STATUS_NOT_OWNER_OF_RESOURCE,
  CORE_MUTEX_WAS_DELETED,
  CORE_MUTEX_TIMEOUT,
  CORE_MUTEX_STATUS_CEILING_VIOLATED
}   CORE_mutex_Status;

 






















typedef enum {
  CORE_MUTEX_NESTING_ACQUIRES,
  CORE_MUTEX_NESTING_IS_ERROR,
  CORE_MUTEX_NESTING_BLOCKS
}  CORE_mutex_Nesting_behaviors;
 
 






 




typedef struct {
  CORE_mutex_Nesting_behaviors lock_nesting_behavior;
  boolean                      only_owner_release;
  CORE_mutex_Disciplines       discipline;
  Priority_Control             priority_ceiling;
}   CORE_mutex_Attributes;
 
 


 
typedef struct {
  Thread_queue_Control    Wait_queue;
  CORE_mutex_Attributes   Attributes;
  unsigned32              lock;
  unsigned32              nest_count;
  Thread_Control         *holder;
  Objects_Id              holder_id;
}   CORE_mutex_Control;

 







void _CORE_mutex_Initialize(
  CORE_mutex_Control           *the_mutex,
  Objects_Classes               the_class,
  CORE_mutex_Attributes        *the_mutex_attributes,
  unsigned32                    initial_lock,
  Thread_queue_Extract_callout  proxy_extract_callout
);
 
 










void _CORE_mutex_Seize(
  CORE_mutex_Control  *the_mutex,
  Objects_Id           id,
  boolean              wait,
  Watchdog_Interval    timeout
);
 
 









CORE_mutex_Status _CORE_mutex_Surrender(
  CORE_mutex_Control                *the_mutex,
  Objects_Id                         id,
  CORE_mutex_API_mp_support_callout  api_mutex_mp_support
);
 
 







 
void _CORE_mutex_Flush(
  CORE_mutex_Control         *the_mutex,
  Thread_queue_Flush_callout  remote_extract_callout,
  unsigned32                  status
);
 







 

 

# 37 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/sem.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/coresem.h" 1 3
 















 


 








 
 



 
typedef void ( *CORE_semaphore_API_mp_support_callout )(
                 Thread_Control *,
                 Objects_Id
             );

 



typedef enum {
  CORE_SEMAPHORE_DISCIPLINES_FIFO,
  CORE_SEMAPHORE_DISCIPLINES_PRIORITY
}   CORE_semaphore_Disciplines;

 


 
typedef enum {
  CORE_SEMAPHORE_STATUS_SUCCESSFUL,
  CORE_SEMAPHORE_STATUS_UNSATISFIED_NOWAIT,
  CORE_SEMAPHORE_WAS_DELETED,
  CORE_SEMAPHORE_TIMEOUT,
  CORE_SEMAPHORE_MAXIMUM_COUNT_EXCEEDED
}   CORE_semaphore_Status;

 




typedef struct {
  unsigned32                  maximum_count;
  CORE_semaphore_Disciplines  discipline;
}   CORE_semaphore_Attributes;
 
 



 
typedef struct {
  Thread_queue_Control        Wait_queue;
  CORE_semaphore_Attributes   Attributes;
  unsigned32                  count;
}   CORE_semaphore_Control;

 







void _CORE_semaphore_Initialize(
  CORE_semaphore_Control       *the_semaphore,
  Objects_Classes               the_class,
  CORE_semaphore_Attributes    *the_semaphore_attributes,
  unsigned32                    initial_value,
  Thread_queue_Extract_callout  proxy_extract_callout
);
 
 










void _CORE_semaphore_Seize(
  CORE_semaphore_Control  *the_semaphore,
  Objects_Id               id,
  boolean                  wait,
  Watchdog_Interval        timeout
);
 
 









CORE_semaphore_Status _CORE_semaphore_Surrender(
  CORE_semaphore_Control                *the_semaphore,
  Objects_Id                             id,
  CORE_semaphore_API_mp_support_callout  api_semaphore_mp_support
);
 
 








void _CORE_semaphore_Flush(
  CORE_semaphore_Control         *the_semaphore,
  Thread_queue_Flush_callout      remote_extract_callout,
  unsigned32                      status
);








 

 

# 39 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/sem.h" 2 3



 



typedef struct {
  Objects_Control          Object;
  rtems_attribute          attribute_set;
  union {
    CORE_mutex_Control     mutex;
    CORE_semaphore_Control semaphore;
  } Core_control;
}   Semaphore_Control;

 




extern  Objects_Information  _Semaphore_Information;

 







void _Semaphore_Manager_initialization(
  unsigned32 maximum_semaphores
);

 











rtems_status_code rtems_semaphore_create(
  rtems_name           name,
  unsigned32           count,
  rtems_attribute      attribute_set,
  rtems_task_priority  priority_ceiling,
  rtems_id            *id
);

 













rtems_status_code rtems_semaphore_ident(
  rtems_name    name,
  unsigned32    node,
  rtems_id     *id
);

 








rtems_status_code rtems_semaphore_delete(
  rtems_id   id
);

 













rtems_status_code rtems_semaphore_obtain(
  rtems_id       id,
  unsigned32     option_set,
  rtems_interval timeout
);

 











rtems_status_code rtems_semaphore_release(
  rtems_id   id
);

 






rtems_status_code rtems_semaphore_flush(
  Objects_Id      id
);

 










boolean _Semaphore_Seize(
  Semaphore_Control *the_semaphore,
  unsigned32         option_set
);

 







 
rtems_status_code _Semaphore_Translate_core_mutex_return_code (
  unsigned32 the_mutex_status
);

 







 
rtems_status_code _Semaphore_Translate_core_semaphore_return_code (
  unsigned32 the_mutex_status
);
 
 

















 









 
void  _Semaphore_Core_semaphore_mp_support (
  Thread_Control *the_thread,
  rtems_id        id
);

 








void _POSIX_Semaphore_MP_support(
  Thread_Control *the_thread,
  Objects_Id      id
);













 
# 48 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/message.h" 1 3
 







































# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/coremsg.h" 1 3
 













 


 




# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 1 3
 


 





 
# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/syslimits.h" 1 3
 





# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 1 3
 


 

# 114 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 3



# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/limits.h" 1 3
 


















 































 






















 










 





 





 















 











 













 








 









 






 











 
# 117 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 2 3




# 7 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/syslimits.h" 2 3


# 11 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 2 3





 



 



 




 





 



 












 

 




 



 








 



 













 



# 107 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 3




 









# 23 "/usr/local/rtems/mrm332/lib/include/rtems/score/coremsg.h" 2 3





 
 



 
typedef void ( *CORE_message_queue_API_mp_support_callout )(
                 Thread_Control *,
                 Objects_Id
             );

 






 
typedef struct {
    unsigned32  size;
    unsigned32  buffer[1];
} CORE_message_queue_Buffer;
 
 



 
typedef struct {
  Chain_Node                 Node;
  int                        priority;
  CORE_message_queue_Buffer  Contents;
}   CORE_message_queue_Buffer_control;

 



typedef enum {
  CORE_MESSAGE_QUEUE_DISCIPLINES_FIFO,
  CORE_MESSAGE_QUEUE_DISCIPLINES_PRIORITY
}   CORE_message_queue_Disciplines;

 











 
typedef int CORE_message_queue_Submit_types;

 


 
typedef enum {
  CORE_MESSAGE_QUEUE_STATUS_SUCCESSFUL,
  CORE_MESSAGE_QUEUE_STATUS_INVALID_SIZE,
  CORE_MESSAGE_QUEUE_STATUS_TOO_MANY,
  CORE_MESSAGE_QUEUE_STATUS_UNSATISFIED,
  CORE_MESSAGE_QUEUE_STATUS_UNSATISFIED_NOWAIT,
  CORE_MESSAGE_QUEUE_STATUS_WAS_DELETED,
  CORE_MESSAGE_QUEUE_STATUS_TIMEOUT
}   CORE_message_queue_Status;

 




typedef struct {
  CORE_message_queue_Disciplines  discipline;
}   CORE_message_queue_Attributes;
 
 





typedef void (*CORE_message_queue_Notify_Handler)( void * );

 



 
typedef struct {
  Thread_queue_Control               Wait_queue;
  CORE_message_queue_Attributes      Attributes;
  unsigned32                         maximum_pending_messages;
  unsigned32                         number_of_pending_messages;
  unsigned32                         maximum_message_size;
  Chain_Control                      Pending_messages;
  CORE_message_queue_Buffer         *message_buffers;
  CORE_message_queue_Notify_Handler  notify_handler;
  void                              *notify_argument;
  Chain_Control                      Inactive_messages;
}   CORE_message_queue_Control;

 







boolean _CORE_message_queue_Initialize(
  CORE_message_queue_Control    *the_message_queue,
  Objects_Classes                the_class,
  CORE_message_queue_Attributes *the_message_queue_attributes,
  unsigned32                     maximum_pending_messages,
  unsigned32                     maximum_message_size,
  Thread_queue_Extract_callout   proxy_extract_callout
);
 
 







 
void _CORE_message_queue_Close(
  CORE_message_queue_Control *the_message_queue,
  Thread_queue_Flush_callout  remote_extract_callout,
  unsigned32                  status
);

 









unsigned32 _CORE_message_queue_Flush(
  CORE_message_queue_Control *the_message_queue
);

 







 
unsigned32 _CORE_message_queue_Flush_support(
  CORE_message_queue_Control *the_message_queue
);
 
 









void _CORE_message_queue_Flush_waiting_threads(
  CORE_message_queue_Control *the_message_queue
);

 








 
CORE_message_queue_Status _CORE_message_queue_Broadcast(
  CORE_message_queue_Control                *the_message_queue,
  void                                      *buffer,
  unsigned32                                 size,
  Objects_Id                                 id,
  CORE_message_queue_API_mp_support_callout  api_message_queue_mp_support,
  unsigned32                                *count
);

 












 
void _CORE_message_queue_Submit(
  CORE_message_queue_Control                *the_message_queue,
  void                                      *buffer,
  unsigned32                                 size,
  Objects_Id                                 id,
  CORE_message_queue_API_mp_support_callout  api_message_queue_mp_support,
  CORE_message_queue_Submit_types            submit_type,
  boolean                                    wait,
  Watchdog_Interval                          timeout
);

 











 
void _CORE_message_queue_Seize(
  CORE_message_queue_Control      *the_message_queue,
  Objects_Id                       id,
  void                            *buffer,
  unsigned32                      *size,
  boolean                          wait,
  Watchdog_Interval                timeout
);

 









void _CORE_message_queue_Insert_message(
  CORE_message_queue_Control        *the_message_queue,
  CORE_message_queue_Buffer_control *the_message,
  CORE_message_queue_Submit_types    submit_type
);








 

 

# 41 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/message.h" 2 3


 




 
typedef enum {
  MESSAGE_QUEUE_SEND_REQUEST   = 0,
  MESSAGE_QUEUE_URGENT_REQUEST = 1
}  Message_queue_Submit_types;

 




typedef struct {
  Objects_Control             Object;
  rtems_attribute             attribute_set;
  CORE_message_queue_Control  message_queue;
}   Message_queue_Control;

 




extern  Objects_Information  _Message_queue_Information;

 







void _Message_queue_Manager_initialization(
  unsigned32 maximum_message_queues
);

 












rtems_status_code rtems_message_queue_create(
  rtems_name       name,
  unsigned32       count,
  unsigned32       max_message_size,
  rtems_attribute  attribute_set,
  Objects_Id      *id
);

 













rtems_status_code rtems_message_queue_ident(
  rtems_name    name,
  unsigned32    node,
  Objects_Id   *id
);

 








rtems_status_code rtems_message_queue_delete(
  Objects_Id id
);

 















rtems_status_code rtems_message_queue_send(
  Objects_Id            id,
  void                 *buffer,
  unsigned32            size
);

 











rtems_status_code rtems_message_queue_urgent(
  Objects_Id            id,
  void                 *buffer,
  unsigned32            size
);

 










rtems_status_code rtems_message_queue_broadcast(
  Objects_Id            id,
  void                 *buffer,
  unsigned32            size,
  unsigned32           *count
);

 













rtems_status_code rtems_message_queue_receive(
  Objects_Id            id,
  void                 *buffer,
  unsigned32           *size,
  unsigned32            option_set,
  rtems_interval        timeout
);

 










rtems_status_code rtems_message_queue_flush(
  Objects_Id  id,
  unsigned32 *count
);

 










rtems_status_code rtems_message_queue_get_number_pending(
  Objects_Id  id,
  unsigned32 *count
);


 











 
rtems_status_code _Message_queue_Submit(
  Objects_Id                  id,
  void                       *buffer,
  unsigned32                  size,
  Message_queue_Submit_types  submit_type
);

 








Message_queue_Control *_Message_queue_Allocate (
    unsigned32          count,
    unsigned32          max_message_size
);

 







 
rtems_status_code _Message_queue_Translate_core_message_queue_return_code (
  unsigned32 the_message_queue_status
);

 









 



















 
# 49 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/event.h" 1 3
 






























# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/options.h" 1 3
 





















 




typedef unsigned32 rtems_option;

 





















 
# 32 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/event.h" 2 3





 






 




typedef enum {
  EVENT_SYNC_SYNCHRONIZED,
  EVENT_SYNC_NOTHING_HAPPENED,
  EVENT_SYNC_TIMEOUT,
  EVENT_SYNC_SATISFIED
}  Event_Sync_states;

 






 
void _Event_Manager_initialization( void );

 










rtems_status_code rtems_event_send (
  Objects_Id         id,
  rtems_event_set event_in
);

 
















rtems_status_code rtems_event_receive (
  rtems_event_set  event_in,
  rtems_option     option_set,
  rtems_interval   ticks,
  rtems_event_set *event_out
);

 











void _Event_Seize (
  rtems_event_set  event_in,
  rtems_option     option_set,
  rtems_interval   ticks,
  rtems_event_set *event_out
);

 








void _Event_Surrender (
  Thread_Control *the_thread
);

 











void _Event_Timeout (
  Objects_Id  id,
  void       *ignored
);

 





extern  volatile Event_Sync_states _Event_Sync_state;













 
# 50 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/signal.h" 1 3
 

































 






 
void _Signal_Manager_initialization( void );

 










rtems_status_code rtems_signal_catch(
  rtems_asr_entry   asr_handler,
  rtems_mode        mode_set
);

 








rtems_status_code rtems_signal_send(
  Objects_Id             id,
  rtems_signal_set signal_set
);










 
# 51 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/part.h" 1 3
 




































 



typedef struct {
  Objects_Control     Object;
  void               *starting_address;       
  unsigned32          length;                 
  unsigned32          buffer_size;            
  rtems_attribute  attribute_set;          
  unsigned32          number_of_used_blocks;  
  Chain_Control       Memory;                 
}   Partition_Control;

 




extern  Objects_Information _Partition_Information;

 







void _Partition_Manager_initialization(
  unsigned32 maximum_partitions
);

 













rtems_status_code rtems_partition_create(
  rtems_name          name,
  void               *starting_address,
  unsigned32          length,
  unsigned32          buffer_size,
  rtems_attribute  attribute_set,
  Objects_Id         *id
);

 













rtems_status_code rtems_partition_ident(
  rtems_name    name,
  unsigned32    node,
  Objects_Id   *id
);

 








rtems_status_code rtems_partition_delete(
  Objects_Id id
);

 









rtems_status_code rtems_partition_get_buffer(
  Objects_Id  id,
  void       **buffer
);

 









rtems_status_code rtems_partition_return_buffer(
  Objects_Id  id,
  void       *buffer
);













 
# 53 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/region.h" 1 3
 
































# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/heap.h" 1 3
 


























 



typedef enum {
  HEAP_EXTEND_SUCCESSFUL,
  HEAP_EXTEND_ERROR,
  HEAP_EXTEND_NOT_IMPLEMENTED
}  Heap_Extend_status;

 







 





 
















                                      
                                      

 













typedef struct Heap_Block_struct Heap_Block;

struct Heap_Block_struct {
  unsigned32  back_flag;    
  unsigned32  front_flag;   
  Heap_Block *next;         
  Heap_Block *previous;     
};

 













typedef struct {
  Heap_Block *start;        
  Heap_Block *final;        

  Heap_Block *first;        
  Heap_Block *permanent_null;   
  Heap_Block *last;         
  unsigned32  page_size;    
  unsigned32  reserved;
}   Heap_Control;

 










unsigned32 _Heap_Initialize(
  Heap_Control *the_heap,
  void         *starting_address,
  unsigned32    size,
  unsigned32    page_size
);

 








Heap_Extend_status _Heap_Extend(
  Heap_Control *the_heap,
  void         *starting_address,
  unsigned32    size,
  unsigned32   *amount_extended
);

 











void *_Heap_Allocate(
  Heap_Control *the_heap,
  unsigned32    size
);

 









boolean _Heap_Size_of_user_area(
  Heap_Control        *the_heap,
  void                *starting_address,
  unsigned32          *size
);

 









boolean _Heap_Free(
  Heap_Control *the_heap,
  void         *start_address
);

 







void _Heap_Walk(
  Heap_Control *the_heap,
  int           source,
  boolean       do_dump
);










 
# 34 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/region.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/debug.h" 1 3
 























 



typedef unsigned32 rtems_debug_control;

 






 



extern  rtems_debug_control _Debug_Level;

 







void _Debug_Manager_initialization( void );

 







void rtems_debug_enable (
  rtems_debug_control  to_be_enabled
);

 






 
void rtems_debug_disable (
  rtems_debug_control  to_be_disabled
);
 
 









boolean _Debug_Is_enabled(
  rtems_debug_control  level
);






 
# 35 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/region.h" 2 3




 




typedef struct {
  Objects_Control       Object;
  Thread_queue_Control  Wait_queue;             
  void                 *starting_address;       
  unsigned32            length;                 
  unsigned32            page_size;              
  unsigned32            maximum_segment_size;   
  rtems_attribute       attribute_set;
  unsigned32            number_of_used_blocks;  
  Heap_Control          Memory;
}  Region_Control;

 




extern  Objects_Information _Region_Information;

 







void _Region_Manager_initialization(
  unsigned32 maximum_regions
);

 













rtems_status_code rtems_region_create(
  rtems_name          name,
  void               *starting_address,
  unsigned32          length,
  unsigned32          page_size,
  rtems_attribute  attribute_set,
  Objects_Id         *id
);

 










rtems_status_code rtems_region_extend(
  Objects_Id          id,
  void               *starting_address,
  unsigned32          length
);

 










rtems_status_code rtems_region_ident(
  rtems_name    name,
  Objects_Id   *id
);

 








rtems_status_code rtems_region_delete(
  Objects_Id id
);

 













rtems_status_code rtems_region_get_segment(
  Objects_Id         id,
  unsigned32         size,
  rtems_option       option_set,
  rtems_interval     timeout,
  void              **segment
);

 








rtems_status_code rtems_region_get_segment_size(
  Objects_Id         id,
  void              *segment,
  unsigned32        *size
);

 













rtems_status_code rtems_region_return_segment(
  Objects_Id  id,
  void       *segment
);








 








# 224 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/region.h" 3











 
# 54 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/dpmem.h" 1 3
 


































 





typedef struct {
  Objects_Control  Object;
  void            *internal_base;  
  void            *external_base;  
  unsigned32       length;         
}   Dual_ported_memory_Control;

 



extern  Objects_Information  _Dual_ported_memory_Information;

 







void _Dual_ported_memory_Manager_initialization(
  unsigned32 maximum_ports
);

 











rtems_status_code rtems_port_create(
  rtems_name    name,
  void         *internal_start,
  void         *external_start,
  unsigned32    length,
  Objects_Id   *id
);

 









rtems_status_code rtems_port_ident(
  rtems_name    name,
  Objects_Id   *id
);

 








rtems_status_code rtems_port_delete(
  Objects_Id id
);

 









rtems_status_code rtems_port_external_to_internal(
  Objects_Id   id,
  void        *external,
  void       **internal
);

 









rtems_status_code rtems_port_internal_to_external(
  Objects_Id   id,
  void        *internal,
  void       **external
);










 
# 55 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3


# 1 "/usr/local/rtems/mrm332/lib/include/rtems/fatal.h" 1 3
 



























 









void volatile rtems_fatal_error_occurred(
  unsigned32 the_error
);






 
# 57 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/rtems/ratemon.h" 1 3
 


































 




typedef enum {
  RATE_MONOTONIC_INACTIVE,                
  RATE_MONOTONIC_OWNER_IS_BLOCKING,       
  RATE_MONOTONIC_ACTIVE,                  
  RATE_MONOTONIC_EXPIRED_WHILE_BLOCKING,  
                                          
  RATE_MONOTONIC_EXPIRED                  
                                          
}   rtems_rate_monotonic_period_states;

 






 

 

typedef struct {
  rtems_rate_monotonic_period_states  state;
  unsigned32                          ticks_since_last_period;
  unsigned32                          ticks_executed_since_last_period;
}  rtems_rate_monotonic_period_status;

 




typedef struct {
  Objects_Control                     Object;
  Watchdog_Control                    Timer;
  rtems_rate_monotonic_period_states  state;
  unsigned32                          owner_ticks_executed_at_period;
  unsigned32                          time_at_period;
  Thread_Control                     *owner;
}   Rate_monotonic_Control;

extern  Objects_Information _Rate_monotonic_Information;

 







void _Rate_monotonic_Manager_initialization(
  unsigned32 maximum_periods
);

 









rtems_status_code rtems_rate_monotonic_create(
  rtems_name    name,
  Objects_Id   *id
);

 










rtems_status_code rtems_rate_monotonic_ident(
  rtems_name    name,
  Objects_Id   *id
);

 









rtems_status_code rtems_rate_monotonic_cancel(
  Objects_Id id
);

 








rtems_status_code rtems_rate_monotonic_delete(
  Objects_Id id
);

 









rtems_status_code rtems_rate_monotonic_get_status(
  Objects_Id                           id,
  rtems_rate_monotonic_period_status  *status
);

 










rtems_status_code rtems_rate_monotonic_period(
  Objects_Id      id,
  rtems_interval  length
);

 












void _Rate_monotonic_Timeout (
  Objects_Id  id,
  void       *ignored
);










 
# 58 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3






# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/sysstate.h" 1 3
 




















 

 

 



typedef enum {
  SYSTEM_STATE_BEFORE_INITIALIZATION,    
  SYSTEM_STATE_BEFORE_MULTITASKING,      
  SYSTEM_STATE_BEGIN_MULTITASKING,       
  SYSTEM_STATE_UP,                       
  SYSTEM_STATE_SHUTDOWN,                 
  SYSTEM_STATE_FAILED                    
} System_state_Codes;




 



 
extern  boolean _System_state_Is_multiprocessing;

 



extern  System_state_Codes _System_state_Current;

 



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/sysstate.inl" 1 3
 

















 







 
static __inline__  void _System_state_Handler_initialization (
  boolean  is_multiprocessing
)
{
  _System_state_Current = SYSTEM_STATE_BEFORE_INITIALIZATION;
  _System_state_Is_multiprocessing = is_multiprocessing;
}
 
 









static __inline__  void _System_state_Set (
  System_state_Codes state
)
{
  _System_state_Current = state;
}

 








static __inline__  System_state_Codes _System_state_Get ( void )
{
  return _System_state_Current;
}

 









static __inline__  boolean _System_state_Is_before_initialization (
  System_state_Codes state
)
{
  return (state == SYSTEM_STATE_BEFORE_INITIALIZATION);
}

 









static __inline__  boolean _System_state_Is_before_multitasking (
  System_state_Codes state
)
{
  return (state == SYSTEM_STATE_BEFORE_MULTITASKING);
}

 









static __inline__  boolean _System_state_Is_begin_multitasking (
  System_state_Codes state
)
{
  return (state == SYSTEM_STATE_BEGIN_MULTITASKING);
}

 









static __inline__  boolean _System_state_Is_up (
  System_state_Codes state
)
{
  return (state == SYSTEM_STATE_UP);
}

 









static __inline__  boolean _System_state_Is_failed (
  System_state_Codes state
)
{
  return (state == SYSTEM_STATE_FAILED);
}


 
# 59 "/usr/local/rtems/mrm332/lib/include/rtems/score/sysstate.h" 2 3







 
# 64 "/usr/local/rtems/mrm332/lib/include/rtems.h" 2 3




 


 




 
 


 


 


 
 






 





 


 

 
 






 







 
# 22 "/usr/local/rtems/mrm332/lib/include/bsp.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/clockdrv.h" 1 3
 




















 

extern volatile rtems_unsigned32 Clock_driver_ticks;
extern rtems_device_major_number rtems_clock_major;
extern rtems_device_minor_number rtems_clock_minor;

 



 
rtems_device_driver Clock_initialize(
  rtems_device_major_number,
  rtems_device_minor_number,
  void *
);

rtems_device_driver Clock_control(
  rtems_device_major_number major,
  rtems_device_minor_number minor,
  void *pargp
);






 
# 23 "/usr/local/rtems/mrm332/lib/include/bsp.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/console.h" 1 3
 

























rtems_device_driver console_initialize(
  rtems_device_major_number,
  rtems_device_minor_number,
  void *
);

rtems_device_driver console_open(
  rtems_device_major_number,
  rtems_device_minor_number,
  void *
);

rtems_device_driver console_close(
  rtems_device_major_number,
  rtems_device_minor_number,
  void *
);

rtems_device_driver console_read(
  rtems_device_major_number,
  rtems_device_minor_number,
  void *
);

rtems_device_driver console_write(
  rtems_device_major_number,
  rtems_device_minor_number,
  void *
);

rtems_device_driver console_control(
  rtems_device_major_number,
  rtems_device_minor_number,
  void *
);






 
# 24 "/usr/local/rtems/mrm332/lib/include/bsp.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/iosupp.h" 1 3
 


















 







 








 






# 25 "/usr/local/rtems/mrm332/lib/include/bsp.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/mrm332.h" 1 3
 








 






 















 

















 









 

 



 
static void reboot(void);
__inline__ static void reboot() {asm("trap #15; .word 0x0063");}


# 26 "/usr/local/rtems/mrm332/lib/include/bsp.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/sim.h" 1 3
 



















































 



 











 

 







 




				 












				 
 




				 













				 











				 
 





				 

				 

				 
 







				 

				 

 






 
				 










				 






				 






				 
 




				 

				 

				 

				 

				 

				 
 




				 




				 

 




				 

 


 












 










 






















































































# 27 "/usr/local/rtems/mrm332/lib/include/bsp.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/qsm.h" 1 3
 










































 




 











				 







				 
 



				 





				 




				 




				 


















				 












				 



				 


				 
 


 

 



 













				 
 




				 









				 






				 








				 






				 






				 

				 

				 


# 28 "/usr/local/rtems/mrm332/lib/include/bsp.h" 2 3


 





 
 

 










 



 











 





# 81 "/usr/local/rtems/mrm332/lib/include/bsp.h" 3

 

extern char _etext[];
extern char _copy_start[];
extern char _edata[];
extern char _clear_start[];
extern char end[];
extern char _copy_data_from_rom[];

 







 







# 115 "/usr/local/rtems/mrm332/lib/include/bsp.h" 3

 

extern rtems_configuration_table BSP_Configuration;

extern m68k_isr_entry M68Kvec[];    

extern int stack_size;

extern int stack_start;

 


 
 


 
 



 

void bsp_cleanup( void );

m68k_isr_entry set_vector(
  rtems_isr_entry     handler,
  rtems_vector_number vector,
  int                 type
);

void console_init(void);

void Spurious_Initialize(void);

void _UART_flush(void);

void Clock_exit(void);

void outbyte(char);






 
# 7 "init.c" 2


# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 1 3
 


















 











# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/_ansi.h" 1 3
 

 











# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/config.h" 1 3



 
 
# 14 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/config.h" 3


# 25 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/config.h" 3


 








# 44 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/config.h" 3













































 
















typedef int __int32_t;
typedef unsigned int __uint32_t;








# 15 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/_ansi.h" 2 3


 
 

























# 61 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/_ansi.h" 3


 








# 32 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 2 3





# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 1 3






 


# 19 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3



 


 





 


# 61 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 





 


















 





 

 

# 131 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 

 


































typedef long unsigned int size_t;






















 




 

# 271 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


# 283 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 

 

# 317 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3




 





















# 37 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 2 3



# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stdarg.h" 1 3
 
































































 






typedef void *__gnuc_va_list;



 

# 122 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stdarg.h" 3




















# 209 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stdarg.h" 3




# 40 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 2 3


 





# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/reent.h" 1 3
 

 










# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/time.h" 1 3
 











# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/features.h" 1 3
 
















 




int POSIX_MP_NOT_IMPLEMENTED( void );
int POSIX_NOT_IMPLEMENTED( void );
int POSIX_BOTTOM_REACHED( void );

 







 


























 











 
















 



















 
# 13 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/time.h" 2 3


# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 1 3
 














# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 1 3






 







 

 




 


 





 


# 61 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 





 


















 





 

 





















typedef long int ptrdiff_t;









 




 

 


# 188 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3





 




 





























 


























typedef long int wchar_t;
























typedef unsigned int  wint_t;




 

 

# 317 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3




 













 







# 16 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/machine/types.h" 1 3
 












# 1 "/usr/local/rtems/mrm332/lib/include/machine/endian.h" 1 3
 








 

















 













# 60 "/usr/local/rtems/mrm332/lib/include/machine/endian.h" 3





# 14 "/usr/local/rtems/mrm332/lib/include/machine/types.h" 2 3


typedef rtems_signed64		int64_t;
typedef rtems_signed32		int32_t;
typedef rtems_signed16		int16_t;
typedef rtems_signed8		int8_t;

typedef rtems_unsigned64	u_int64_t;
typedef rtems_unsigned32	u_int32_t;
typedef rtems_unsigned16	u_int16_t;
typedef rtems_unsigned8		u_int8_t;










# 17 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 2 3


 













 
typedef unsigned char   u_char;
typedef unsigned short  u_short;
typedef unsigned int    u_int;
typedef unsigned long   u_long;
typedef unsigned short  ushort;    
typedef unsigned int    uint;      


typedef long  daddr_t;
typedef char *  caddr_t;
 
 









typedef unsigned short  ino_t;



typedef unsigned long long dev_t; 
typedef long  off_t;              
 
typedef unsigned short uid_t;     
typedef unsigned short gid_t;     

typedef int pid_t;                
typedef long key_t;
 











typedef unsigned mode_t;                 


 
typedef unsigned int nlink_t;   
 





typedef int ssize_t;            

 




 

 








 
typedef long  fd_mask;




 
typedef struct fd_set {
  fd_mask fds_bits[((( 60  )+((  (sizeof (fd_mask) * 8 )  )-1))/(  (sizeof (fd_mask) * 8 )  )) ];
} fd_set;
 
 




 
 


 



pid_t  getpid    (void)   ;
pid_t  getppid    (void)   ;

 





uid_t  getuid    (void)  ;
uid_t  geteuid    (void)  ;
gid_t  getgid    (void)  ;
gid_t  getegid    (void)  ;


 



int  setuid    (uid_t uid)  ;
int  setgid    (gid_t gid)  ;

 



int  getgroups    (int gidsetsize, gid_t grouplist[])   ;

 





char *  getlogin    (void)   ;


int  getlogin_r    (char *name, size_t namesize)   ;


 



pid_t   getpgrp    (void)   ;

 



pid_t   setsid    (void)   ;

 



int   setpgid    (pid_t pid, pid_t pgid)   ;

 





 
 


 

typedef __uint32_t  clockid_t;


 

typedef __uint32_t  timer_t;



 








# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/sched.h" 1 3
 













# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 1 3
 





# 345 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 3

 
# 15 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/sched.h" 2 3

# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/time.h" 1 3
 



# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 1 3
 





# 345 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 3

 
# 5 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/time.h" 2 3









 





 

 

typedef unsigned long  clock_t;


 

typedef long  time_t;



 



struct timespec {
  time_t  tv_sec;    
  long    tv_nsec;   
};

struct itimerspec {
  struct timespec  it_interval;   
  struct timespec  it_value;      
};

 

 



struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

struct timeval {
  int tv_sec;
  int tv_usec;
};

int gettimeofday(
  struct timeval  *tp,
  struct timezone *tzp
);

 








# 86 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/time.h" 3

# 95 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/time.h" 3





 
# 16 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/sched.h" 2 3


 













 





struct sched_param {
  int sched_priority;            


  int ss_low_priority;           
                                 
  struct timespec ss_replenish_period; 
                                 
  struct timespec ss_initial_budget;    

};






 

# 220 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/types.h" 2 3


 



typedef __uint32_t pthread_t;             

 





 



 

                                       
                                       


 



typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;


  int  cputime_clock_allowed;   

  int  detachstate;

} pthread_attr_t;

 




 





                                   
                                   


 


 

 


 





 



typedef __uint32_t pthread_mutex_t;       

typedef struct {
  int   is_initialized;

  int   process_shared;   


  int   prio_ceiling;
  int   protocol;

  int   recursive;
} pthread_mutexattr_t;

 



typedef __uint32_t pthread_cond_t;        

typedef struct {
  int   is_initialized;

  int   process_shared;        

} pthread_condattr_t;          

 



typedef __uint32_t pthread_key_t;         

 



typedef struct {
  int   is_initialized;   
  int   init_executed;    
} pthread_once_t;        








 
# 15 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/time.h" 2 3

# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/time.h" 1 3
 





# 99 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/time.h" 3

 
# 16 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/time.h" 2 3

# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/siginfo.h" 1 3
 














 


 
typedef __uint32_t sigset_t;
 




 
 











 


















 


 
 




 



 
 




 


 
 



 

                         

                         
                         

                         
 






union sigval {
  int    sival_int;     
  void  *sival_ptr;     
};

struct sigevent {
  int              sigev_notify;                
  int              sigev_signo;                 
  union sigval     sigev_value;                 


  void           (*sigev_notify_function)( union sigval ); 
                                                
  pthread_attr_t  *sigev_notify_attributes;     

};

 


 
 
 





 
typedef struct {
  int          si_signo;     
  int          si_code;      
  union sigval si_value;     
} siginfo_t;
 
 


 
 
 


                          
 
 










 
struct sigaction {
  int         sa_flags;        
  sigset_t    sa_mask;         
                               
                               
  union {
    void      (*_handler)();   
    void      (*_sigaction)( int, siginfo_t *, void * );
  } _signal_handlers;
};
 








 
# 17 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/time.h" 2 3


 





 




# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 1 3






 


# 19 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3



 


 





 


# 61 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 





 


















 





 

 


# 126 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 




 

 


# 188 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3





 




 


# 269 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3
















 

 

# 317 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3




 













 







# 30 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/time.h" 2 3


 





struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

 





clock_t     clock       (void)  ;
double      difftime    (time_t _time2, time_t _time1)  ;
time_t      mktime      (struct tm *_timeptr)  ;
time_t      time        (time_t *_timer)  ;
size_t      strftime   
            (char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t)  ;


char      *  asctime     (const struct tm *_tblock)  ;
char      *  ctime       (const time_t *_time)  ;
struct tm *  gmtime      (const time_t *_timer)  ;
struct tm *  localtime   (const time_t *_timer)  ;


 



char      *  asctime_r     (const struct tm *, char *)  ;
char      *  ctime_r     (const time_t *, char *)  ;
struct tm *  gmtime_r    (const time_t *, struct tm *)  ;
struct tm *  localtime_r     (const time_t *, struct tm *)  ;

 



time_t  time    (time_t *tloc)  ;



 



int  clock_settime    (clockid_t clock_id, const struct timespec *tp)  ;
int  clock_gettime    (clockid_t clock_id, struct timespec *tp)  ;
int  clock_getres     (clockid_t clock_id, struct timespec *res)  ;

 



int  timer_create   
  (clockid_t clock_id, struct sigevent *evp, timer_t *timerid)
  ;

 



int  timer_delete    (timer_t timerid)  ;

 



int  timer_settime   
  (timer_t timerid,
   int flags,
   const struct itimerspec *value,
   struct itimerspec       *ovalue)
  ;

int  timer_gettime    (timer_t timerid, struct itimerspec *value)  ;
int  timer_getoverrun    (timer_t timerid)  ;

 



int  nanosleep    (const struct timespec  *rqtp, struct timespec *rmtp)  ;



 



 




 


                            
                            

                            
                            

 





 






 





 











 











 



int  clock_getcpuclockid    (pid_t pid, clockid_t *clock_id)  ;





 



int  clock_setenable_attr    (clockid_t clock_id, int attr)  ;

int  clock_getenable_attr    (clockid_t clock_id, int *attr)  ;








 
# 14 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/reent.h" 2 3





typedef unsigned long  __ULong;











struct _glue 
{
  struct _glue *_next;
  int _niobs;
  struct __sFILE *_iobs;
};

struct _Bigint 
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};

 





struct _atexit {
	struct	_atexit *_next;			 
	int	_ind;				 
	void	(*_fns[32 ])(void);	 
};

 






struct __sbuf {
	unsigned char *_base;
	int	_size;
};

 




typedef long _fpos_t;		 
				 

 
























struct __sFILE {
  unsigned char *_p;	 
  int	_r;		 
  int	_w;		 
  short	_flags;		 
  short	_file;		 
  struct __sbuf _bf;	 
  int	_lbfsize;	 

   
  void * 	_cookie;	 

  int	 (*_read)   (void *  _cookie, char *_buf, int _n)  ;
  int	 (*_write)   (void *  _cookie, const char *_buf, int _n)  ;
  _fpos_t  (*_seek)   (void *  _cookie, _fpos_t _offset, int _whence)  ;
  int	 (*_close)   (void *  _cookie)  ;

   
  struct __sbuf _ub;	 
  unsigned char *_up;	 
  int	_ur;		 

   
  unsigned char _ubuf[3];	 
  unsigned char _nbuf[1];	 

   
  struct __sbuf _lb;	 

   
  int	_blksize;	 
  int	_offset;	 

  struct _reent *_data;
};

 







struct _reent
{
   
  int _errno;

   


  struct __sFILE *_stdin, *_stdout, *_stderr;

  int  _inc;			 
  char _emergency[25];
 
  int _current_category;	 
  const  char *_current_locale;

  int __sdidinit;		 

  void  (*__cleanup)   (struct _reent *)  ;

   
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;

   
  int _cvtlen;			 
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _rand_next;
          char * _strtok_last;
          char _asctime_buf[26];
          struct tm _localtime_buf;
          int _gamma_signgam;
        } _reent;
   

 
      struct
        {

          unsigned char * _nextf[30 ];
          unsigned int _nmalloc[30 ];
        } _unused;
    } _new;

   
  struct _atexit *_atexit;	 
  struct _atexit _atexit0;	 

   
  void (**(_sig_func))(int);

   


  struct _glue __sglue;			 
  struct __sFILE __sf[3];		 
};






 








extern struct _reent *_impure_ptr  ;

void _reclaim_reent  (struct _reent *)  ;

 









# 48 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 2 3


typedef _fpos_t fpos_t;

typedef struct __sFILE FILE;





	 











 














































 










int	 remove    (const char *)  ;
int	 rename    (const char *, const char *)  ;

char *	 tempnam    (const char *, const char *)  ;
FILE *	 tmpfile    (void)  ;
char *	 tmpnam    (char *)  ;
int	 fclose    (FILE *)  ;
int	 fflush    (FILE *)  ;
FILE *	 freopen    (const char *, const char *, FILE *)  ;
void	 setbuf    (FILE *, char *)  ;
int	 setvbuf    (FILE *, char *, int, size_t)  ;
int	 fprintf    (FILE *, const char *, ...)  ;
int	 fscanf    (FILE *, const char *, ...)  ;
int	 printf    (const char *, ...)  ;
int	 scanf    (const char *, ...)  ;
int	 sscanf    (const char *, const char *, ...)  ;
int	 vfprintf    (FILE *, const char *, __gnuc_va_list )  ;
int	 vprintf    (const char *, __gnuc_va_list )  ;
int	 vsprintf    (char *, const char *, __gnuc_va_list )  ;
int	 vsnprintf    (char *, size_t, const char *, __gnuc_va_list )  ;
int	 fgetc    (FILE *)  ;
char *   fgets    (char *, int, FILE *)  ;
int	 fputc    (int, FILE *)  ;
int	 fputs    (const char *, FILE *)  ;
int	 getc    (FILE *)  ;
int	 getchar    (void)  ;
char *   gets    (char *)  ;
int	 putc    (int, FILE *)  ;
int	 putchar    (int)  ;
int	 puts    (const char *)  ;
int	 ungetc    (int, FILE *)  ;
size_t	 fread    (void * , size_t _size, size_t _n, FILE *)  ;
size_t	 fwrite    (const void *  , size_t _size, size_t _n, FILE *)  ;
int	 fgetpos    (FILE *, fpos_t *)  ;
int	 fseek    (FILE *, long, int)  ;
int	 fsetpos    (FILE *, const fpos_t *)  ;
long	 ftell    ( FILE *)  ;
void	 rewind    (FILE *)  ;
void	 clearerr    (FILE *)  ;
int	 feof    (FILE *)  ;
int	 ferror    (FILE *)  ;
void     perror    (const char *)  ;

FILE *	 fopen    (const char *_name, const char *_type)  ;
int	 sprintf    (char *, const char *, ...)  ;
int	 snprintf    (char *, size_t, const char *, ...)  ;








 



# 197 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 3


 



FILE *	 _fdopen_r    (struct _reent *, int, const char *)  ;
FILE *	 _fopen_r    (struct _reent *, const char *, const char *)  ;
int	 _getchar_r    (struct _reent *)  ;
char *	 _gets_r    (struct _reent *, char *)  ;
int	 _iprintf_r    (struct _reent *, const char *, ...)  ;
int	 _mkstemp_r    (struct _reent *, char *)  ;
char *	 _mktemp_r    (struct _reent *, char *)  ;
void	 _perror_r    (struct _reent *, const char *)  ;
int	 _printf_r    (struct _reent *, const char *, ...)  ;
int	 _putchar_r    (struct _reent *, int)  ;
int	 _puts_r    (struct _reent *, const char *)  ;
int	 _remove_r    (struct _reent *, const char *)  ;
int	 _rename_r    (struct _reent *,
			   const char *_old, const char *_new)  ;
int	 _scanf_r    (struct _reent *, const char *, ...)  ;
int	 _sprintf_r    (struct _reent *, char *, const char *, ...)  ;
int	 _snprintf_r    (struct _reent *, char *, size_t, const char *, ...)  ;
char *	 _tempnam_r    (struct _reent *, const char *, const char *)  ;
FILE *	 _tmpfile_r    (struct _reent *)  ;
char *	 _tmpnam_r    (struct _reent *, char *)  ;
int	 _vfprintf_r    (struct _reent *, FILE *, const char *, __gnuc_va_list )  ;
int	 _vprintf_r    (struct _reent *, const char *, __gnuc_va_list )  ;
int	 _vsprintf_r    (struct _reent *, char *, const char *, __gnuc_va_list )  ;
int	 _vsnprintf_r    (struct _reent *, char *, size_t, const char *, __gnuc_va_list )  ;

 



int	 __srget    (FILE *)  ;
int	 __swbuf    (int, FILE *)  ;

 



# 248 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 3


 




# 264 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 3

 

































# 308 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdio.h" 3






# 9 "init.c" 2

# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdlib.h" 1 3
 















# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 1 3






 


# 19 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3



 


 





 


# 61 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 





 


















 





 

 


# 126 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 




 

 


# 188 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3





 




 


# 269 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3
















 

 

# 317 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3




 













 







# 17 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdlib.h" 2 3




typedef struct 
{
  int quot;  
  int rem;  
} div_t;

typedef struct 
{
  long quot;  
  long rem;  
} ldiv_t;













extern int __mb_cur_max;




void 	 abort   (void ) __attribute__ ( (noreturn) )   ;
int	 abs   (int)  ;
int	 atexit   (void  (*__func)(void ))  ;
double	 atof   (const char *__nptr)  ;



int	 atoi   (const char *__nptr)  ;
long	 atol   (const char *__nptr)  ;
void * 	 bsearch   (const void *  __key,
		       const void *  __base,
		       size_t __nmemb,
		       size_t __size,
		       int  (*_compar)   (const void * , const void * )  )  ;
void * 	 calloc   (size_t __nmemb, size_t __size)  ;
div_t	 div   (int __numer, int __denom)  ;
void 	 exit   (int __status) __attribute__ ( (noreturn) )   ;
void 	 free   (void * )  ;
char *   getenv   (const char *__string)  ;
char *	 _getenv_r   (struct _reent *, const char *__string)  ;
char *	 _findenv   (const  char *, int *)  ;
char *	 _findenv_r   (struct _reent *, const  char *, int *)  ;
long	 labs   (long)  ;
ldiv_t	 ldiv   (long __numer, long __denom)  ;
void * 	 malloc   (size_t __size)  ;
int	 mblen   (const char *, size_t)  ;
int	 _mblen_r   (struct _reent *, const char *, size_t, int *)  ;
int	 mbtowc   (wchar_t *, const char *, size_t)  ;
int	 _mbtowc_r   (struct _reent *, wchar_t *, const char *, size_t, int *)  ;
int	 wctomb   (char *, wchar_t)  ;
int	 _wctomb_r   (struct _reent *, char *, wchar_t, int *)  ;
size_t	 mbstowcs   (wchar_t *, const char *, size_t)  ;
size_t	 _mbstowcs_r   (struct _reent *, wchar_t *, const char *, size_t, int *)  ;
size_t	 wcstombs   (char *, const wchar_t *, size_t)  ;
size_t	 _wcstombs_r   (struct _reent *, char *, const wchar_t *, size_t, int *)  ;
void 	 qsort   (void *  __base, size_t __nmemb, size_t __size, int(*_compar)(const void * , const void * ))  ;
int	 rand   (void )  ;
void * 	 realloc   (void *  __r, size_t __size)  ;
void 	 srand   (unsigned __seed)  ;
double	 strtod   (const char *__n, char **_end_PTR)  ;



long	 strtol   (const char *__n, char **_end_PTR, int __base)  ;
unsigned long  strtoul   (const char *_n_PTR, char **_end_PTR, int __base)  ;
unsigned long  _strtoul_r   (struct _reent *,const char *_n_PTR, char **_end_PTR, int __base)  ;
int	 system   (const char *__string)  ;

# 125 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/stdlib.h" 3


char *	 _dtoa_r   (struct _reent *, double, int, int, int *, int*, char**)  ;
void * 	 _malloc_r   (struct _reent *, size_t)  ;
void * 	 _calloc_r   (struct _reent *, size_t, size_t)  ;
void 	 _free_r   (struct _reent *, void * )  ;
void * 	 _realloc_r   (struct _reent *, void * , size_t)  ;
void 	 _mstats_r   (struct _reent *, char *)  ;
int	 _system_r   (struct _reent *, const char *)  ;

void 	 __eprintf   (const char *, const char *, unsigned int, const char *)  ;





# 10 "init.c" 2


# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/string.h" 1 3
 















# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 1 3






 


# 19 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3



 


 





 


# 61 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 





 


















 





 

 


# 126 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3


 




 

 


# 188 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3





 




 


# 269 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3
















 

 

# 317 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/stddef.h" 3




 













 







# 17 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/string.h" 2 3






void *  	  memchr   (const void * , int, size_t)  ;
int 	  memcmp   (const void * , const void * , size_t)  ;
void *  	  memcpy   (void * , const void * , size_t)  ;
void * 	  memmove   (void * , const void * , size_t)  ;
void * 	  memset   (void * , int, size_t)  ;
char 	*  strcat   (char *, const char *)  ;
char 	*  strchr   (const char *, int)  ;
int	  strcmp   (const char *, const char *)  ;
int	  strcoll   (const char *, const char *)  ;
char 	*  strcpy   (char *, const char *)  ;
size_t	  strcspn   (const char *, const char *)  ;
char 	*  strerror   (int)  ;
size_t	  strlen   (const char *)  ;
char 	*  strncat   (char *, const char *, size_t)  ;
int	  strncmp   (const char *, const char *, size_t)  ;
char 	*  strncpy   (char *, const char *, size_t)  ;
char 	*  strpbrk   (const char *, const char *)  ;
char 	*  strrchr   (const char *, int)  ;
size_t	  strspn   (const char *, const char *)  ;
char 	*  strstr   (const char *, const char *)  ;


char 	*  strtok   (char *, const char *)  ;


size_t	  strxfrm   (char *, const char *, size_t)  ;

# 85 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/string.h" 3






# 12 "init.c" 2

# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/math.h" 1 3
 








# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/machine/ieeefp.h" 1 3






































# 48 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/machine/ieeefp.h" 3

































 







































# 129 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/machine/ieeefp.h" 3





























# 10 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/math.h" 2 3





 


union __dmath
{
  __uint32_t i[2];
  double d;
};

extern const union __dmath __infinity;





 


extern double atan  (double)  ;
extern double cos  (double)  ;
extern double sin  (double)  ;
extern double tan  (double)  ;
extern double tanh  (double)  ;
extern double frexp  (double, int *)  ;
extern double modf  (double, double *)  ;
extern double ceil  (double)  ;
extern double fabs  (double)  ;
extern double floor  (double)  ;


 



extern double acos  (double)  ;
extern double asin  (double)  ;
extern double atan2  (double, double)  ;
extern double cosh  (double)  ;
extern double sinh  (double)  ;
extern double exp  (double)  ;
extern double ldexp  (double, int)  ;
extern double log  (double)  ;
extern double log10  (double)  ;
extern double pow  (double, double)  ;
extern double sqrt  (double)  ;
extern double fmod  (double, double)  ;



# 264 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/math.h" 3










# 13 "init.c" 2


# 1 "global.h" 1
 










 
 
 




 
 
 

 
rtems_interval ticks_per_sec;


# 15 "init.c" 2

# 1 "tpu.h" 1







struct tpu_Def
{
	volatile unsigned short int TPUMCR;				 
	volatile unsigned short int TCR;
	volatile unsigned short int DSCR;
	volatile unsigned short int DSSR;
	volatile unsigned short int TICR;
	volatile unsigned short int CIER;
	volatile unsigned short int CFSR0;
	volatile unsigned short int CFSR1;
	volatile unsigned short int CFSR2;
	volatile unsigned short int CFSR3;
	volatile unsigned short int HSQR0;
	volatile unsigned short int HSQR1;
	volatile unsigned short int HSRR0;
	volatile unsigned short int HSRR1;
	volatile unsigned short int CPR0;
	volatile unsigned short int CPR1;
	volatile unsigned short int CISR;
	volatile unsigned short int LR;
	volatile unsigned short int SGLR;
	volatile unsigned short int DCNR;
};

 
extern void init_tpu(void);


# 16 "init.c" 2

# 1 "lcd.h" 1




int lcd_init(int rows, int columns);
int lcd_string(int row, char *string);
int lcd_write_reg(int wait, char val);
int lcd_write_data(char val);

# 17 "init.c" 2

# 1 "motor.h" 1
 








 
 
 

 



 


 


 
 
 

typedef unsigned int uint32;
typedef signed int int32;

 
typedef int32 mot_velocity_t;

 
typedef int32 mot_accel_t;

typedef struct mot_status
{
  uint32 pos;
  mot_velocity_t velocity;
  mot_accel_t accel;
  int stopped;
  uint32 tick;
} mot_status_t;

 
 
 

 

int mot_init(void);

 
void mot_get_pid(int32 *kp, int32 *kd, int32 *ki);

 
void mot_set_pid(int32 kp, int32 kd, int32 ki);

 

uint32 mot_get_ticks(void);

 
void mot_get_status(mot_status_t *mot0p, mot_status_t *mot1p);

 

int mot_set_vel(int mot, mot_accel_t a, mot_velocity_t v, uint32 tick);

 

int mot_move(int mot, int32 s, mot_accel_t a, mot_velocity_t v, uint32 tick);


# 18 "init.c" 2

# 1 "servo.h" 1
 










 
 
 













 
 
 

struct tpu_qom_ram
{
  volatile unsigned char ref_addr_b;
  volatile unsigned char last_off_addr_a;
  volatile unsigned char loop_cnt;
  volatile unsigned char off_ptr_c;
  volatile unsigned short offset_1;
  volatile unsigned short offset_2;
  volatile unsigned short offset_3;
  volatile unsigned short offset_4;
};

 
 
 

 


void servo_init(int tpu_pin, int angle);

 
void servo_set(int tpu_pin, int angle);


# 19 "init.c" 2

# 1 "distance.h" 1
 








 
 
 

 




 
 
 

 

int distance_init(void);

 


long distance_read(int which_sensor);

 

unsigned long distance_read_raw(int which_sensor);


# 20 "init.c" 2

# 1 "spi.h" 1
 
















 
 
 

 











 



 
 
 

 

int spi_init(void);

 

int spi_xfer(int csno,  
	     int nbytes,  
	     unsigned char *outbytes,  
	     unsigned char *inbytes,  
	     unsigned char *releasecs);  


 

int spi_lock(void);

 
int spi_unlock(void);


# 21 "init.c" 2

# 1 "compass.h" 1
 











 
 
 

 

int compass_init(void);

 
int compass_pause(void);

 
int compass_resume(void);

 



int compass_read(int wait_for_new);



# 22 "init.c" 2

# 1 "robot.h" 1
 








 
 
 

 

extern long heading_movement_factor;

 
extern long robot_acc;
extern long robot_vel;

 
 
 

 
int robot_turn_to(int heading);


# 23 "init.c" 2

# 1 "flame.h" 1
 












 
 
 

 














 
 
 

struct tpu_pta_ram
{
  volatile unsigned short chan_ctl;
  volatile unsigned char max_count;
  volatile unsigned char period_count;
  volatile unsigned short last_time;
  volatile unsigned short accum;
  volatile unsigned short hw;
  volatile unsigned short lw;
};

 
 
 

 

extern int flame_init(void);

 


extern int flame_read(int wait_for_new);


# 24 "init.c" 2

# 1 "mcp3208.h" 1
 














 
 
 

 

extern int mcp3208_read(int spi_port, int nchans, int *chans,
			unsigned short *results);


# 25 "init.c" 2


rtems_interval ticks_per_sec = 0;

typedef enum lcd_mode {
  LCD_MIN = 0,
  LCD_MOT0 = 0,
  LCD_DIST = 1,
  LCD_COMPASS = 2,
  LCD_FLAME = 3,
  LCD_ATOD = 4,
  LCD_MAX
} lcd_mode_t;

char *lcd_mode_names[] = { "MOT0", "DIST", "COMPASS", "FLAME", "ATOD" };
lcd_mode_t lcd_mode;

int ir_angles[8] = { 27, 20, 12, 4, -4, -12, -20, -27 };

rtems_task
lcd_task (rtems_task_argument ignored)
{
  char buf[80];
  char *spaces = "                    ";  
  mot_status_t m0, m1;
  int i, j, sensor;
  unsigned long rd[3];
  long d[3];
  char dbuf[3][20];
  int chans[8];
  unsigned short results[8];
  unsigned sums[8];
  unsigned avg;
  int hi, hi2;
  int hi_idx, hi2_idx;
  int num_samples;
  int angle;

  while (1)
    {
      switch (lcd_mode)
	{
	case LCD_MOT0:
	  mot_get_status(&m0, &m1);

	  sprintf(buf, "m0pos: 0x%08x", m0.pos);
	  if (strlen(buf) < 20)
	    strncat(buf, spaces, 20 - strlen(buf));
	  lcd_string(0, buf);
	  sprintf(buf, "v0x%04x, a0x%04x", (short)m0.velocity,
		  (short)m0.accel);
	  if (strlen(buf) < 20)
	    strncat(buf, spaces, 20 - strlen(buf));
	  lcd_string(1, buf);
	  break;

	case LCD_DIST:
	  for (i=0; i<3; i++)
	    {
	      rd[i] = distance_read_raw(i);
	      d[i] = distance_read(i);
	      if (d[i] >= 0)
		sprintf(dbuf[i], "%2ld.%ld", d[i]/10, d[i]%10);
	      else
		sprintf(dbuf[i], " inf");
	    }
	  sprintf(buf, "0:%s 1:%s 2:%s",
		  dbuf[0], dbuf[1], dbuf[2]);
	  if (strlen(buf) < 20)
	    strncat(buf, spaces, 20 - strlen(buf));
	  lcd_string(0, buf);
	  sprintf(buf, "0:%02lx   1:%02lx   2:%02lx",
		  rd[0], rd[1], rd[2]);
	  if (strlen(buf) < 20)
	    strncat(buf, spaces, 20 - strlen(buf));
	  lcd_string(1, buf);
	  break;

	case LCD_COMPASS:
	  sprintf(buf, "Heading: %3d    ", compass_read(0));
	  if (strlen(buf) < 20)
	    strncat(buf, spaces, 20 - strlen(buf));
	  lcd_string(0, buf);
	  sprintf (buf, "HMF: 0x%08lx", heading_movement_factor);
	  if (strlen(buf) < 20)
	    strncat(buf, spaces, 20 - strlen(buf));
	  lcd_string(1, buf);
	  break;

	case LCD_FLAME:
	  sprintf(buf, "flame: %d    ", flame_read(0));
	  if (strlen(buf) < 20)
	    strncat(buf, spaces, 20 - strlen(buf));
	  lcd_string(0, buf);
	  lcd_string(1, spaces);
	  break;

	case LCD_ATOD:
	  for (sensor=0; sensor<2; sensor++)
	    {
	       
	      for (i=0; i<8; i++)
		{
		  sums[i] = 0;
		  chans[i] = i;
		}

	       
	      num_samples = 8;
	      for (i=0; i<num_samples; i++)
		{
		  mcp3208_read(sensor, 4, chans, results);
		  mcp3208_read(sensor, 4, chans+4, results+4);

		  for (j=0; j<8; j++)
		    sums[j] += results[j];
		}

	       
	      hi = hi2 = 0;
	      hi_idx = hi2_idx = -1;
	      avg = 0;
	      for (i=0; i<8; i++)
		{
		  sums[i] /= num_samples;

		  avg += sums[i];
		  if (sums[i] > hi)
		    {
		      hi2 = hi;
		      hi2_idx = hi_idx;
		      hi = sums[i];
		      hi_idx = i;
		    }
		  else if (sums[i] > hi2)
		    {
		      hi2 = sums[i];
		      hi2_idx = i;
		    }
		}
	      avg = avg/8;

	      if ((hi2_idx >= 0) &&
		  (abs(hi_idx - hi2_idx) == 1))
		{
		  angle = (ir_angles[hi_idx] * hi +
			   ir_angles[hi2_idx] * hi2) / (hi + hi2);
		}
	      else
		{
		  angle = ir_angles[hi_idx];
		}

	      if ((hi > (avg * 3 / 2)) &&
		  (hi > 0x20))
		{
		  sprintf(buf, "%d: %3d %03x %03x", sensor, angle,
			  avg, hi);
		}
	      else
		{
		  sprintf(buf, "%d: --- %03x %03x %3d", sensor, avg, hi,
			  angle);
		}
	      if (strlen(buf) < 20)
		strncat(buf, spaces, 20 - strlen(buf));
	      lcd_string(sensor, buf);
	    }
	  break;

	default:
	  lcd_string(0, spaces);
	  lcd_string(1, spaces);
	  break;
	}

      rtems_task_wake_after(ticks_per_sec/10);
    }
}

void
demo(int which_demo)
{
  uint32 ticks;
  mot_status_t m0, m1;
  int count = 0;
  int heading;
  int i;

  if (which_demo == 0)
    {
      rtems_task_wake_after(ticks_per_sec * 10);

      heading = compass_read(0);
      while (1)
	{
	  printf ("Moving forward 6 inches.\n");
	  ticks = mot_get_ticks();
	  mot_move(0 , 979 *6, 8, 250, ticks+2);
	  mot_move(1 , 979 *6, 8, 250, ticks+2);

	  while(1)
	    {
	      if (is_character_ready())  
		goto demo_done;
	      rtems_task_wake_after(ticks_per_sec/10);
	      mot_get_status(&m0, &m1);
	      if ((m0.stopped) && (m1.stopped))
		break;
	    }

	  printf ("Turning left 90 degrees.\n");
	  heading -= 90;
	  while (heading < 0)
	    heading += 360;
	  if (heading > 360)
	    heading %= 360;
	  robot_turn_to(heading);

	  while(1)
	    {
	      if (is_character_ready())  
		goto demo_done;
	      rtems_task_wake_after(ticks_per_sec/10);
	      mot_get_status(&m0, &m1);
	      if ((m0.stopped) && (m1.stopped))
		break;
	    }

	  if (((++count) % 4) == 0)
	    {
	      printf ("Blasting extinguisher!");
	      servo_set(15,0);
	      rtems_task_wake_after(ticks_per_sec/2);
	      servo_set(15,-40);
	    }
	}
    }
  else if (which_demo == 1)
    {
      rtems_task_wake_after(ticks_per_sec * 10);

      heading = compass_read(0);
      count = 0;
      for (i=0; i<16; i++)
	{
	  if ((i % 8) < 4)
	    {
	      heading = heading + 90;
	    }
	  else
	    {
	      heading = heading - 90;
	    }
	  while (heading < 0)
	    heading += 360;
	  if (heading > 360)
	    heading %= 360;
	  robot_turn_to(heading);

	  if (is_character_ready())  
	    goto demo_done;

	  if (((++count) % 4) == 0)
	    {
	      printf ("Blasting extinguisher!");
	      servo_set(15,0);
	      rtems_task_wake_after(ticks_per_sec/2);
	      servo_set(15,-40);
	    }
	}
    }

 demo_done:
}

void
ui_help(void)
{
  printf ("\n");
  printf ("Valid commands:\n");
  printf ("\n");
  printf ("pid - print PID constants\n");
  printf ("kp - set kp (position) constant of PID loop\n");
  printf ("kd - set kd (derivative) constant of PID loop\n");
  printf ("ki - set ki (integral) constant of PID loop\n");
  printf ("\n");
  printf ("acc - set acceleration (steps/tick/tick)\n");
  printf ("vel - set velocity (steps/tick)\n");
  printf ("steps - set # of steps to move\n");
  printf ("go - tell motor (0 or 1) to move\n");
  printf ("demo - run a little demo\n");
  printf ("lcd - set lcd mode\n");
  printf ("ad - read a-to-d converter (specify channel 0-15)\n");
  printf ("\n");
  printf ("There are about %d steps to an inch, 100 ticks per second\n",
	  979 );
  printf ("\n");
}

int
calc_flame_pos(double angle_l, double angle_r,
	       double *px, double *py)
{
  double cl;
  double cr;

  double angle_l_rads = angle_l * M_PI / 180;
  double angle_r_rads = angle_r * M_PI / 180;

  if (angle_l == 0)
    cl = 0;
  else
    cl = -1 / tan(M_PI_2 - angle_l_rads);

  if (angle_r == 0)
    cr = 0;
  else
    cr = 1 / tan(M_PI_2 + angle_r_rads);

  if ((cr == 0) && (cl == 0))
    return -1;

  *px = -3.125 * (cr + cl) / (cr - cl);
  *py = -6.25 / (cl - cr);

  return 0;
}

rtems_task
ui_task (rtems_task_argument ignored)
{
  int32 kp = 0, kd = 0, ki = 0;
  int32 acc = robot_acc, vel = robot_vel, steps = 0;
  int32 val;
  int i;
  char buf[80];
  char *cmd, *sval;
  int chan, status;
  unsigned short result;

  mot_get_pid(&kp, &kd, &ki);
  while (1)
    {
      printf ("cmd: ");
      fgets(buf, 80, (_impure_ptr->_stdin) );

      cmd = strtok(buf, " \t\n");
      if (cmd == ((void *)0) )
	{
	  ui_help();
	  continue;
	}
      sval = strtok(((void *)0) , " \t\n");
      if (sval == ((void *)0) )
	{
	  val = 0;
	}
      else
	{
	  val = strtol(sval, ((void *)0) , 0);
	}

      if (strcmp(cmd, "pid") == 0)
	{
	  printf ("kp 0x%08x kd 0x%08x ki 0x%08x\n",
		  kp, kd, ki);
	}
      else if (strcmp(cmd, "t") == 0)
	{
	  double x, y;

	  if (calc_flame_pos(3.4, -3.4, &x, &y) == 0)
	    printf ("l = 3.4, r = -3.4: x %f, y %f\n",
		    x, y);
	  else
	    printf ("calc_flame_pos returned error!\n");

	  if (calc_flame_pos(26.6, -26.6, &x, &y) == 0)
	    printf ("l = 26.6, r = -26.6: x %f, y %f\n",
		    x, y);
	  else
	    printf ("calc_flame_pos returned error!\n");
	}
      else if (strcmp(cmd, "kp") == 0)
	{
	  kp = val;
	  printf ("Set kp to 0x%08x\n", kp);
	  mot_set_pid(kp, kd, ki);
	  printf ("kp 0x%08x kd 0x%08x ki 0x%08x\n",
		  kp, kd, ki);
	}
      else if (strcmp(cmd, "kd") == 0)
	{
	  kd = val;
	  printf ("Set kd to 0x%08x\n", kd);
	  mot_set_pid(kp, kd, ki);
	  printf ("kp 0x%08x kd 0x%08x ki 0x%08x\n",
		  kp, kd, ki);
	}
      else if (strcmp(cmd, "ki") == 0)
	{
	  ki = val;
	  printf ("Set ki to 0x%08x\n", ki);
	  mot_set_pid(kp, kd, ki);
	  printf ("kp 0x%08x kd 0x%08x ki 0x%08x\n",
		  kp, kd, ki);
	}
      else if (strcmp(cmd, "acc") == 0)
	{
	  if (val == 0)
	    {
	      printf ("acc is %ld\n", robot_acc);
	    }
	  else
	    {
	      robot_acc = acc = val;
	      printf ("Set acc to %d\n", acc);
	    }
	}
      else if (strcmp(cmd, "vel") == 0)
	{
	  if (val == 0)
	    {
	      printf ("vel is %ld\n", robot_vel);
	    }
	  else
	    {
	      robot_vel = vel = val;
	      printf ("Set vel to %d\n", vel);
	    }
	}
      else if (strcmp(cmd, "go") == 0)
	{
	  if (steps == 0)
	    {
	      printf ("Calling mot_set_vel(%d, 0x%x, 0x%x, mot_get_ticks()+2)\n",
		      val, acc, vel);
	      mot_set_vel(val, acc, vel, mot_get_ticks()+2);
	    }
	  else
	    {
	      printf ("Calling mot_move(%d, 0x%x, 0x%x, 0x%x, mot_get_ticks()+2)\n",
		      val, steps, acc, vel);
	      mot_move(val, steps, acc, vel, mot_get_ticks()+2);
	    }
	}
      else if (strcmp(cmd, "steps") == 0)
	{
	  steps = val;
	  printf ("Set steps to 0x%08x\n", steps);
	}
      else if (strcmp(cmd, "demo") == 0)
	{
	  demo(val);
	}
      else if (strcmp(cmd, "s") == 0)
	{
	  printf ("Moving servo to angle %d\n", val);
	  servo_set(15, val);
	}
      else if (strcmp(cmd, "lcd") == 0)
	{
	  if ((val >= LCD_MIN) &&
	      (val < LCD_MAX))
	    {
	      printf ("Setting LCD mode to %d (%s)\n", val,
		      lcd_mode_names[val]);
	      lcd_mode = val;
	    }
	  else
	    {
	      printf ("Invalid LCD mode - valid modes are:\n");
	      for (i=LCD_MIN; i<LCD_MAX; i++)
		{
		  printf ("  %d: %s\n", i, lcd_mode_names[i]);
		}
	    }
	}
      else if (strcmp(cmd, "ad") == 0)
	{
	  chan = val & 0x7;
	  status = mcp3208_read(val / 8, 1, &chan, &result);
	  printf ("mcp3208_read returned %d, result: 0x%03x\n",
		  status, result);
	}
      else if (strcmp(cmd, "cp") == 0)
	{
	  printf ("compass_pause returned %d\n", compass_pause());
	}
      else if (strcmp(cmd, "cr") == 0)
	{
	  printf ("compass_resume returned %d\n", compass_resume());
	}
      else
	{
	  ui_help();
	}
    }
}

rtems_task Init(
  rtems_task_argument ignored
)
{
  Objects_Id t1;
  rtems_status_code code;

  rtems_clock_get(RTEMS_CLOCK_GET_TICKS_PER_SECOND, &ticks_per_sec);
  printf ("Init: %d ticks per second\n", ticks_per_sec);

  printf ("Initializing tpu:\n");
  init_tpu();
  printf ("Done.\n\n");

  printf ("Initializing servo on tpu15:\n");
  servo_init(15, -40);
  printf ("Done.\n\n");

  printf ("Calling mot_init():\n");
  mot_init();
  printf ("mot_init() done.\n\n");

  printf ("Calling lcd_init():\n");
  lcd_init(2,16);
  printf ("Done.\n\n");

  printf ("Calling distance_init():\n");
  distance_init();
  printf ("Done.\n\n");

  printf ("Calling spi_init():\n");
  spi_init();
  printf ("Done.\n\n");

  printf ("Calling compass_init():\n");
  compass_init();
  printf ("Done.\n\n");

  printf ("Calling flame_init():\n");
  flame_init();
  printf ("Done.\n\n");

  printf ("Spawning UI task:\n");
  code = rtems_task_create(( ( 'U' ) << 24 | (  'I' ) << 16 | (  ' ' ) << 8 | (  ' ' ) ) ,
			   20, 4096    * 2,
			   0x00000000 ,
			   0x00000000 ,
			   &t1);
  printf ("  rtems_task_create returned %d; t1 = 0x%08x\n", code, t1);
  code = rtems_task_start(t1, ui_task, 0);
  printf ("Done. (rtems_task_start returned %d)\n\n", code);

  printf ("Spawning LCD task:\n");
  code = rtems_task_create(( ( 'L' ) << 24 | (  'C' ) << 16 | (  'D' ) << 8 | (  ' ' ) ) ,
			   19, 4096    * 2,
			   0x00000000 ,
			   0x00000000 ,
			   &t1);
  printf ("  rtems_task_create returned %d; t1 = 0x%08x\n", code, t1);
  code = rtems_task_start(t1, lcd_task, 0);
  printf ("Done. (rtems_task_start returned %d)\n\n", code);

  rtems_task_delete(((Objects_Id) 0)  );
}

 














# 1 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 1 3
 



































 



 
extern rtems_initialization_tasks_table Initialization_tasks[];
extern rtems_driver_address_table       Device_drivers[];
extern rtems_configuration_table        Configuration;
extern rtems_multiprocessing_table      Multiprocessing_configuration;




extern itron_api_configuration_table    Configuration_ITRON_API;


 








 











unsigned32 rtems_libio_number_iops = 3 ;


 















 



# 1 "/usr/local/rtems/mrm332/lib/include/imfs.h" 1 3
 




















# 1 "/usr/local/rtems/mrm332/lib/include/chain.h" 1 3
 





















 


















 









 

 








 




 













 













 














 














 













 














 














 














 














 














 














 











 











 













 













 












 












 












 












 











 












# 1 "/usr/local/rtems/mrm332/lib/include/rtems/score/chain.inl" 1 3
 





















 









static __inline__  boolean _Chain_Are_nodes_equal(
  Chain_Node *left,
  Chain_Node *right
)
{
  return left == right;
}

 








static __inline__  boolean _Chain_Is_null(
  Chain_Control *the_chain
)
{
  return ( the_chain == ((void *)0)  );
}

 








static __inline__  boolean _Chain_Is_null_node(
  Chain_Node *the_node
)
{
  return ( the_node == ((void *)0)  );
}

 








static __inline__  Chain_Node *_Chain_Head(
  Chain_Control *the_chain
)
{
   return (Chain_Node *) the_chain;
}

 








static __inline__  Chain_Node *_Chain_Tail(
  Chain_Control *the_chain
)
{
   return (Chain_Node *) &the_chain->permanent_null;
}

 









static __inline__  boolean _Chain_Is_empty(
  Chain_Control *the_chain
)
{
  return ( the_chain->first == _Chain_Tail( the_chain ) );
}

 









static __inline__  boolean _Chain_Is_first(
  Chain_Node *the_node
)
{
  return ( the_node->previous == ((void *)0)  );
}

 









static __inline__  boolean _Chain_Is_last(
  Chain_Node *the_node
)
{
  return ( the_node->next == ((void *)0)  );
}

 









static __inline__  boolean _Chain_Has_only_one_node(
  Chain_Control *the_chain
)
{
  return ( the_chain->first == the_chain->last );
}

 









static __inline__  boolean _Chain_Is_head(
  Chain_Control *the_chain,
  Chain_Node    *the_node
)
{
   return ( the_node == _Chain_Head( the_chain ) );
}

 









static __inline__  boolean _Chain_Is_tail(
  Chain_Control *the_chain,
  Chain_Node    *the_node
)
{
   return ( the_node == _Chain_Tail( the_chain ) );
}

 








static __inline__  void _Chain_Initialize_empty(
  Chain_Control *the_chain
)
{
  the_chain->first          = _Chain_Tail( the_chain );
  the_chain->permanent_null = ((void *)0) ;
  the_chain->last           = _Chain_Head( the_chain );
}

 










static __inline__  void _Chain_Extract_unprotected(
  Chain_Node *the_node
)
{
  Chain_Node *next;
  Chain_Node *previous;

  next           = the_node->next;
  previous       = the_node->previous;
  next->previous = previous;
  previous->next = next;
}

 










static __inline__  Chain_Node *_Chain_Get_first_unprotected(
  Chain_Control *the_chain
)
{
  Chain_Node  *return_node;
  Chain_Node  *new_first;

  return_node         = the_chain->first;
  new_first           = return_node->next;
  the_chain->first    = new_first;
  new_first->previous = _Chain_Head( the_chain );

  return return_node;
}

 











static __inline__  Chain_Node *_Chain_Get_unprotected(
  Chain_Control *the_chain
)
{
  if ( !_Chain_Is_empty( the_chain ) )
    return _Chain_Get_first_unprotected( the_chain );
  else
    return ((void *)0) ;
}

 










static __inline__  void _Chain_Insert_unprotected(
  Chain_Node *after_node,
  Chain_Node *the_node
)
{
  Chain_Node *before_node;

  the_node->previous    = after_node;
  before_node           = after_node->next;
  after_node->next      = the_node;
  the_node->next        = before_node;
  before_node->previous = the_node;
}

 










static __inline__  void _Chain_Append_unprotected(
  Chain_Control *the_chain,
  Chain_Node    *the_node
)
{
  Chain_Node *old_last_node;

  the_node->next      = _Chain_Tail( the_chain );
  old_last_node       = the_chain->last;
  the_chain->last     = the_node;
  old_last_node->next = the_node;
  the_node->previous  = old_last_node;
}

 










static __inline__  void _Chain_Prepend_unprotected(
  Chain_Control *the_chain,
  Chain_Node    *the_node
)
{
  _Chain_Insert_unprotected( _Chain_Head( the_chain ), the_node );

}

 










static __inline__  void _Chain_Prepend(
  Chain_Control *the_chain,
  Chain_Node    *the_node
)
{
  _Chain_Insert( _Chain_Head( the_chain ), the_node );
}


 
# 359 "/usr/local/rtems/mrm332/lib/include/chain.h" 2 3



 
# 22 "/usr/local/rtems/mrm332/lib/include/imfs.h" 2 3



# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 1 3
 


 

# 114 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/include/limits.h" 3







# 25 "/usr/local/rtems/mrm332/lib/include/imfs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/libio.h" 1 3
 






















# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/stat.h" 1 3

















 


 



struct	stat 
{
  dev_t		st_dev;
  ino_t		st_ino;
  mode_t	st_mode;
  nlink_t	st_nlink;
  uid_t		st_uid;
  gid_t		st_gid;
  dev_t		st_rdev;
  off_t		st_size;
   





  time_t	st_atime;
  long		st_spare1;
  time_t	st_mtime;
  long		st_spare2;
  time_t	st_ctime;
  long		st_spare3;
  long		st_blksize;
  long		st_blocks;
  long	st_spare4[2];

};
































# 95 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/sys/stat.h" 3
























int	 chmod   ( const char *__path, mode_t __mode )  ;
int      fchmod   (int __fd, mode_t __mode)  ;
int	 fstat   ( int __fd, struct stat *__sbuf )  ;
int	 mkdir   ( const char *_path, mode_t __mode )  ;
int	 mkfifo   ( const char *__path, mode_t __mode )  ;
int	 stat   ( const char *__path, struct stat *__sbuf )  ;
mode_t	 umask   ( mode_t __mask )  ;


int	 mknod   ( const char *_path, mode_t _mode, dev_t dev )  ;
int	 lstat   ( const char *__path, struct stat *__buf )  ;


 

int	 _fstat   ( int __fd, struct stat *__sbuf )  ;
int	 _stat   ( const char *__path, struct stat *__sbuf )  ;






int	 mknod   ( const char *_path, mode_t _mode, dev_t dev )  ;
int	 lstat   ( const char *_path, struct stat *_sbuf )  ;







# 24 "/usr/local/rtems/mrm332/lib/include/rtems/libio.h" 2 3


 



typedef struct rtems_libio_tt rtems_libio_t;

struct rtems_filesystem_location_info_tt;
typedef struct rtems_filesystem_location_info_tt
    rtems_filesystem_location_info_t;

struct rtems_filesystem_mount_table_entry_tt;
typedef struct rtems_filesystem_mount_table_entry_tt
    rtems_filesystem_mount_table_entry_t;

 


typedef enum {
  RTEMS_FILESYSTEM_DIRECTORY,
  RTEMS_FILESYSTEM_DEVICE,
  RTEMS_FILESYSTEM_HARD_LINK,
  RTEMS_FILESYSTEM_SYM_LINK,
  RTEMS_FILESYSTEM_MEMORY_FILE
} rtems_filesystem_node_types_t;

 



typedef int (*rtems_filesystem_open_t)(
  rtems_libio_t *iop,
  const char    *pathname,
  unsigned32     flag,
  unsigned32     mode
);

typedef int (*rtems_filesystem_close_t)(
  rtems_libio_t *iop
);

typedef int (*rtems_filesystem_read_t)(
  rtems_libio_t *iop,
  void          *buffer,
  unsigned32     count
);

typedef int (*rtems_filesystem_write_t)(
  rtems_libio_t *iop,
  const void    *buffer,
  unsigned32    count
);

typedef int (*rtems_filesystem_ioctl_t)(
  rtems_libio_t *iop,
  unsigned32     command,
  void          *buffer
);

typedef int (*rtems_filesystem_lseek_t)(
  rtems_libio_t *iop,
  off_t          length,
  int            whence
);

typedef int (*rtems_filesystem_fstat_t)(
  rtems_filesystem_location_info_t *loc,
  struct stat                      *buf
);

typedef int (*rtems_filesystem_fchmod_t)(
  rtems_filesystem_location_info_t *loc,
  mode_t                            mode
);

typedef int (*rtems_filesystem_ftruncate_t)(
  rtems_libio_t *iop,
  off_t          length
);

typedef int (*rtems_filesystem_fpathconf_t)(
  rtems_libio_t *iop,
  int name
);

typedef int (*rtems_filesystem_fsync_t)(
  rtems_libio_t *iop
);

typedef int (*rtems_filesystem_fdatasync_t)(
  rtems_libio_t *iop
);

typedef int (*rtems_filesystem_fcntl_t)(
  int            cmd,
  rtems_libio_t *iop
);

typedef int (*rtems_filesystem_rmnod_t)(
 rtems_filesystem_location_info_t      *pathloc        
);

typedef struct {
    rtems_filesystem_open_t         open;
    rtems_filesystem_close_t        close;
    rtems_filesystem_read_t         read;
    rtems_filesystem_write_t        write;
    rtems_filesystem_ioctl_t        ioctl;
    rtems_filesystem_lseek_t        lseek;
    rtems_filesystem_fstat_t        fstat;
    rtems_filesystem_fchmod_t       fchmod;
    rtems_filesystem_ftruncate_t    ftruncate;
    rtems_filesystem_fpathconf_t    fpathconf;
    rtems_filesystem_fsync_t        fsync;
    rtems_filesystem_fdatasync_t    fdatasync;
    rtems_filesystem_fcntl_t        fcntl;
    rtems_filesystem_rmnod_t        rmnod;
} rtems_filesystem_file_handlers_r;

 



 







typedef int (*rtems_filesystem_mknod_t)(
   const char                        *path,        
   mode_t                             mode,        
   dev_t                              dev,         
   rtems_filesystem_location_info_t  *pathloc      
);

 




typedef int (*rtems_filesystem_evalpath_t)(
  const char                        *pathname,       
  int                                flags,          
  rtems_filesystem_location_info_t  *pathloc         
);

typedef int (*rtems_filesystem_evalmake_t)(
   const char                       *path,        
   rtems_filesystem_location_info_t *pathloc,     
   const char                      **name         
);

typedef int (*rtems_filesystem_link_t)(
 rtems_filesystem_location_info_t  *to_loc,       
 rtems_filesystem_location_info_t  *parent_loc,   
 const char                        *name          
);

typedef int (*rtems_filesystem_unlink_t)(
 rtems_filesystem_location_info_t  *pathloc        
);

typedef int (*rtems_filesystem_chown_t)(
 rtems_filesystem_location_info_t  *pathloc,        
 uid_t                              owner,          
 gid_t                              group           
);

typedef int (*rtems_filesystem_freenode_t)(
 rtems_filesystem_location_info_t      *pathloc        
);

typedef int (* rtems_filesystem_mount_t ) (
   rtems_filesystem_mount_table_entry_t *mt_entry      
);

typedef int (* rtems_filesystem_fsmount_me_t )(
   rtems_filesystem_mount_table_entry_t *mt_entry
);

typedef int (* rtems_filesystem_unmount_t ) (
   rtems_filesystem_mount_table_entry_t *mt_entry      
);

typedef int (* rtems_filesystem_fsunmount_me_t ) (
   rtems_filesystem_mount_table_entry_t *mt_entry     
);

typedef rtems_filesystem_node_types_t (* rtems_filesystem_node_type_t) (
  rtems_filesystem_location_info_t    *pathloc       
);

typedef int (* rtems_filesystem_utime_t)(
  rtems_filesystem_location_info_t  *pathloc,        
  time_t                             actime,         
  time_t                             modtime         
);

typedef int (*rtems_filesystem_evaluate_link_t)(
  rtems_filesystem_location_info_t *pathloc,      
  int                               flags         
);

typedef int (*rtems_filesystem_symlink_t)(
 rtems_filesystem_location_info_t  *loc,          
 const char                        *link_name,    
 const char                        *node_name
);

typedef int (*rtems_filesystem_readlink_t)(
 rtems_filesystem_location_info_t  *loc,             
 char                              *buf,             
 size_t                            bufsize    
);

 



 


typedef struct {
    rtems_filesystem_evalpath_t      evalpath;
    rtems_filesystem_evalmake_t      evalformake;
    rtems_filesystem_link_t          link;
    rtems_filesystem_unlink_t        unlink;
    rtems_filesystem_node_type_t     node_type;
    rtems_filesystem_mknod_t         mknod;
    rtems_filesystem_chown_t         chown;
    rtems_filesystem_freenode_t      freenod;
    rtems_filesystem_mount_t         mount;
    rtems_filesystem_fsmount_me_t    fsmount_me;
    rtems_filesystem_unmount_t       unmount;
    rtems_filesystem_fsunmount_me_t  fsunmount_me;
    rtems_filesystem_utime_t         utime;
    rtems_filesystem_evaluate_link_t eval_link;
    rtems_filesystem_symlink_t       symlink;
    rtems_filesystem_readlink_t      readlink;
} rtems_filesystem_operations_table;


extern rtems_filesystem_operations_table  IMFS_ops;


 



struct rtems_filesystem_location_info_tt
{
  void                                   *node_access;
  rtems_filesystem_file_handlers_r       *handlers;
  rtems_filesystem_operations_table      *ops;
  rtems_filesystem_mount_table_entry_t   *mt_entry;
};

 




typedef struct {
  int    link_max;
  int    max_canon;
  int    max_input;
  int    name_max;
  int    path_max;
  int    pipe_buf;
  int    posix_async_io;
  int    posix_chown_restrictions;
  int    posix_no_trunc;
  int    posix_prio_io;
  int    posix_sync_io;
  int    posix_vdisable;
} rtems_filesystem_limits_and_options_t;

 



struct rtems_filesystem_mount_table_entry_tt {
  Chain_Node                             Node;
  rtems_filesystem_location_info_t       mt_point_node;
  rtems_filesystem_location_info_t       mt_fs_root;
  int                                    options;
  void                                  *fs_info;

  rtems_filesystem_limits_and_options_t  pathconf_limits_and_options;

   





  char                                  *dev;
};

 



typedef enum
{
  RTEMS_FILESYSTEM_READ_ONLY,
  RTEMS_FILESYSTEM_READ_WRITE,
  RTEMS_FILESYSTEM_BAD_OPTIONS
} rtems_filesystem_options_t;


 






struct rtems_libio_tt {
    rtems_driver_name_t              *driver;
    off_t                             size;       
    off_t                             offset;     
    unsigned32                        flags;
    rtems_filesystem_location_info_t  pathinfo;
    Objects_Id                        sem;      
    unsigned32                        data0;      
    void                             *data1;      
    void                             *file_info;  
    rtems_filesystem_file_handlers_r *handlers;   
};

 





typedef struct {
    rtems_libio_t          *iop;
    off_t                   offset;
    unsigned8              *buffer;
    unsigned32              count;
    unsigned32              flags;
    unsigned32              bytes_moved;
} rtems_libio_rw_args_t;

 



typedef struct {
    rtems_libio_t          *iop;
    unsigned32              flags;
    unsigned32              mode;
} rtems_libio_open_close_args_t;

 



typedef struct {
    rtems_libio_t          *iop;
    unsigned32              command;
    void                   *buffer;
    unsigned32              ioctl_return;
} rtems_libio_ioctl_args_t;

 












void rtems_libio_init(void);

 



typedef int (*rtems_libio_open_t)(
  const char  *pathname,
  unsigned32  flag,
  unsigned32  mode
);

typedef int (*rtems_libio_close_t)(
  int  fd
);

typedef int (*rtems_libio_read_t)(
  int         fd,
  void       *buffer,
  unsigned32  count
);

typedef int (*rtems_libio_write_t)(
  int         fd,
  const void *buffer,
  unsigned32  count
);

typedef int (*rtems_libio_ioctl_t)(
  int         fd,
  unsigned32  command,
  void       *buffer
);

typedef int (*rtems_libio_lseek_t)(
  int    fd,
  off_t  offset,
  int    whence
);

 







 












 












 






 



void rtems_filesystem_initialize( void );


 



# 1 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/termios.h" 1 3



# 1 "/usr/local/rtems/mrm332/lib/include/sys/termios.h" 1 3
 





















typedef unsigned char	cc_t;
typedef unsigned int	speed_t;
typedef unsigned int	tcflag_t;


struct termios {
	tcflag_t c_iflag;		 
	tcflag_t c_oflag;		 
	tcflag_t c_cflag;		 
	tcflag_t c_lflag;		 
	cc_t c_line;			 
	cc_t c_cc[19 ];		 
};

 


















 















 
































 








































 
















 





 




 




int	tcdrain(int);
int	tcflow(int, int);
int	tcflush(int, int);
int	tcgetattr(int, struct termios *);
int	tcsetattr(int, int, struct termios *);
pid_t	tcgetprgrp(int);
int	tcsetprgrp(int, pid_t);
int	tcsendbreak(int, int);

speed_t	cfgetospeed(const struct termios *tp);
int	cfsetospeed(struct termios *tp, speed_t speed);
speed_t	cfgetispeed(const struct termios *tp);
int	cfsetispeed(struct termios *tp, speed_t speed);






# 4 "/usr/local/rtems/lib/gcc-lib/m68k-rtems/2.95.2/../../../../m68k-rtems/include/termios.h" 2 3




# 500 "/usr/local/rtems/mrm332/lib/include/rtems/libio.h" 2 3


typedef struct rtems_termios_callbacks {
  int    (*firstOpen)(int major, int minor, void *arg);
  int    (*lastClose)(int major, int minor, void *arg);
  int    (*pollRead)(int minor);
  int    (*write)(int minor, const char *buf, int len);
  int    (*setAttributes)(int minor, const struct termios *t);
  int    (*stopRemoteTx)(int minor);
  int    (*startRemoteTx)(int minor);
  int    outputUsesInterrupts;
} rtems_termios_callbacks;

 



void rtems_termios_initialize (void);

rtems_status_code rtems_termios_open (
  rtems_device_major_number      major,
  rtems_device_minor_number      minor,
  void                          *arg,
  const rtems_termios_callbacks *callbacks
);

rtems_status_code rtems_termios_close(
  void *arg
);

rtems_status_code rtems_termios_read(
  void *arg
);

rtems_status_code rtems_termios_write(
  void *arg
);

rtems_status_code rtems_termios_ioctl(
  void *arg
);

int rtems_termios_enqueue_raw_characters(
  void *ttyp,
  char *buf,
  int   len
);

int rtems_termios_dequeue_characters(
  void *ttyp,
  int   len
);

void rtems_termios_reserve_resources(
  rtems_configuration_table *configuration,
  rtems_unsigned32           number_of_devices
);

int unmount(
  const char *mount_path
);

int mount(
  rtems_filesystem_mount_table_entry_t **mt_entry,
  rtems_filesystem_operations_table    *fs_ops,
  rtems_filesystem_options_t            fsoptions,
  char                                 *device,
  char                                 *mount_point
);

 



typedef struct {
  rtems_filesystem_operations_table     *fs_ops;
  rtems_filesystem_options_t             fsoptions;
  char                                  *device;
  char                                  *mount_point;
} rtems_filesystem_mount_table_t;

extern rtems_filesystem_mount_table_t *rtems_filesystem_mount_table;
extern int                             rtems_filesystem_mount_table_size;


# 26 "/usr/local/rtems/mrm332/lib/include/imfs.h" 2 3


 








 



struct IMFS_jnode_tt;
typedef struct IMFS_jnode_tt IMFS_jnode_t;

typedef struct {
  Chain_Control                          Entries;
  rtems_filesystem_mount_table_entry_t  *mt_fs;
}  IMFS_directory_t;

typedef struct {
  rtems_device_major_number  major;
  rtems_device_minor_number  minor;
}  IMFS_device_t;

typedef struct {
  IMFS_jnode_t  *link_node;
} IMFS_link_t;

typedef struct {
  const char *name;
} IMFS_sym_link_t;

 
























typedef unsigned char * block_p;
typedef block_p *block_ptr;

typedef struct {
  off_t      size;              
  block_ptr  indirect;          
  block_ptr  doubly_indirect;   
  block_ptr  triply_indirect;   
} IMFS_memfile_t;

 




















 












typedef union {
  IMFS_directory_t   directory;
  IMFS_device_t      device;
  IMFS_link_t        hard_link;
  IMFS_sym_link_t    sym_link;   
  IMFS_memfile_t     file;   
} IMFS_types_union;

 





 



struct IMFS_jnode_tt {
  Chain_Node          Node;                   
  IMFS_jnode_t       *Parent;                 
  char                name[32 +1];   
  mode_t              st_mode;                
  nlink_t             st_nlink;               
  ino_t               st_ino;                 

  uid_t               st_uid;                 
  gid_t               st_gid;                 

  time_t              stat_atime;             
  time_t              stat_mtime;             
  time_t              stat_ctime;             
  rtems_filesystem_node_types_t   type;                   
  IMFS_types_union    info;
};







                






                















typedef struct {
  ino_t                             ino_count;
  rtems_filesystem_file_handlers_r *memfile_handlers;
  rtems_filesystem_file_handlers_r *directory_handlers;
} IMFS_fs_info_t;









 



typedef enum {
  IMFS_NO_MORE_PATH,
  IMFS_CURRENT_DIR,
  IMFS_UP_DIR,
  IMFS_NAME,
  IMFS_INVALID_TOKEN
} IMFS_token_types;

 



extern rtems_filesystem_file_handlers_r       IMFS_directory_handlers;
extern rtems_filesystem_file_handlers_r       IMFS_device_handlers;
extern rtems_filesystem_file_handlers_r       IMFS_link_handlers;
extern rtems_filesystem_file_handlers_r       IMFS_memfile_handlers;
extern rtems_filesystem_operations_table      IMFS_ops;
extern rtems_filesystem_operations_table      miniIMFS_ops;
extern rtems_filesystem_limits_and_options_t  IMFS_LIMITS_AND_OPTIONS; 

 



int IMFS_initialize( 
   rtems_filesystem_mount_table_entry_t *mt_entry
);

int miniIMFS_initialize( 
   rtems_filesystem_mount_table_entry_t *mt_entry
);

int IMFS_initialize_support( 
   rtems_filesystem_mount_table_entry_t *mt_entry,
   rtems_filesystem_operations_table    *op_table,
   rtems_filesystem_file_handlers_r     *memfile_handlers,
   rtems_filesystem_file_handlers_r     *directory_handlers
);

int IMFS_fsunmount(
   rtems_filesystem_mount_table_entry_t *mt_entry
);


 


IMFS_token_types IMFS_get_token(
  const char       *path,
  char             *token,
  int              *token_len
);

void IMFS_dump( void );

void IMFS_initialize_jnode(
  IMFS_jnode_t        *the_jnode,
  rtems_filesystem_node_types_t    type,
  IMFS_jnode_t        *the_parent,
  char                *name,
  mode_t               mode
);

IMFS_jnode_t *IMFS_find_match_in_dir(
  IMFS_jnode_t *directory,                          
  char         *name                                
);

rtems_filesystem_node_types_t IMFS_node_type(
  rtems_filesystem_location_info_t    *pathloc      
);

int IMFS_stat(
  rtems_filesystem_location_info_t *loc,            
  struct stat                      *buf             
);

int IMFS_Set_handlers(  
  rtems_filesystem_location_info_t   *loc 
);

int IMFS_evaluate_link(
  rtems_filesystem_location_info_t *node,         
  int                               flags         
);

int IMFS_eval_path(  
  const char                        *pathname,      
  int                               flags,          
  rtems_filesystem_location_info_t  *pathloc        
);


int IMFS_link(
  rtems_filesystem_location_info_t  *to_loc,       
  rtems_filesystem_location_info_t  *parent_loc,   
  const char                        *token         
);

int IMFS_unlink(
  rtems_filesystem_location_info_t  *pathloc        
);

int IMFS_chown(
  rtems_filesystem_location_info_t  *pathloc,       
  uid_t                              owner,         
  gid_t                              group          
);

int IMFS_freenodinfo(
  rtems_filesystem_location_info_t  *pathloc        
);

int IMFS_mknod(
  const char                        *path,          
  mode_t                             mode,          
  dev_t                              dev,           
  rtems_filesystem_location_info_t  *pathloc        
);

IMFS_jnode_t *IMFS_create_node(
  rtems_filesystem_location_info_t  *parent_loc,    
  rtems_filesystem_node_types_t                  type,          
  char                              *name,          
  mode_t                             mode,          
  IMFS_types_union                  *info           
);

int IMFS_evaluate_for_make(
  const char                         *path,         
  rtems_filesystem_location_info_t   *pathloc,      
  const char                        **name          
);

int IMFS_mount(
  rtems_filesystem_mount_table_entry_t *mt_entry   
);

int IMFS_unmount(
  rtems_filesystem_mount_table_entry_t *mt_entry   
);

int IMFS_freenod(
  rtems_filesystem_location_info_t  *node          
);

int IMFS_memfile_remove(
 IMFS_jnode_t  *the_jnode          
);

int memfile_ftruncate(
  rtems_libio_t *iop,                
  off_t          length              
);

int imfs_dir_open(
  rtems_libio_t *iop,              
  const char    *pathname,         
  unsigned32     flag,             
  unsigned32     mode              
);

int imfs_dir_close(
  rtems_libio_t *iop              
);

int imfs_dir_read(
  rtems_libio_t *iop,               
  void          *buffer,            
  unsigned32     count              
);

int imfs_dir_lseek(
  rtems_libio_t        *iop,               
  off_t                 offset,            
  int                   whence             
);

int imfs_dir_fstat(
  rtems_filesystem_location_info_t *loc,          
  struct stat                      *buf           
);

int imfs_dir_rmnod(
  rtems_filesystem_location_info_t      *pathloc        
);

int memfile_open(
  rtems_libio_t *iop,              
  const char    *pathname,         
  unsigned32     flag,             
  unsigned32     mode              
);

int memfile_close(
  rtems_libio_t *iop              
);

int memfile_read(
  rtems_libio_t *iop,              
  void          *buffer,           
  unsigned32     count             
);

int memfile_write(
  rtems_libio_t *iop,              
  const void    *buffer,           
  unsigned32     count             
);

int memfile_ioctl(
  rtems_libio_t *iop,              
  unsigned32     command,          
  void          *buffer            
);

int memfile_lseek(
  rtems_libio_t        *iop,         
  off_t                 offset,      
  int                   whence       
);

int memfile_rmnod(
  rtems_filesystem_location_info_t      *pathloc        
);

int device_open(
  rtems_libio_t *iop,             
  const char    *pathname,        
  unsigned32     flag,            
  unsigned32     mode             
);

int device_close(
  rtems_libio_t *iop              
);

int device_read(
  rtems_libio_t *iop,             
  void          *buffer,          
  unsigned32     count            
);

int device_write(
  rtems_libio_t *iop,                
  const void    *buffer,             
  unsigned32     count               
);

int device_ioctl(
  rtems_libio_t *iop,                
  unsigned32     command,            
  void          *buffer              
);

int device_lseek(
  rtems_libio_t *iop,                
  off_t          offset,             
  int            whence              
);

int IMFS_utime(
  rtems_filesystem_location_info_t  *pathloc,        
  time_t                             actime,         
  time_t                             modtime         
);

int IMFS_fchmod(
  rtems_filesystem_location_info_t *loc,
  mode_t                            mode
);

int IMFS_symlink(
  rtems_filesystem_location_info_t  *parent_loc,   
  const char                        *link_name,
  const char                        *node_name
);

int IMFS_readlink(
 rtems_filesystem_location_info_t   *loc,          
 char                               *buf,          
 size_t                             bufsize    
);

int IMFS_fdatasync(
  rtems_libio_t *iop
);

int IMFS_fcntl(
  int            cmd,
  rtems_libio_t *iop
);

int IMFS_rmnod(
  rtems_filesystem_location_info_t      *pathloc        
);






 
# 97 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3





rtems_filesystem_mount_table_t configuration_mount_table = {



  &miniIMFS_ops,

  RTEMS_FILESYSTEM_READ_WRITE,
  ((void *)0) ,
  ((void *)0) 
};

rtems_filesystem_mount_table_t 
    *rtems_filesystem_mount_table = &configuration_mount_table;
int rtems_filesystem_mount_table_size = 1;





 











 










  
  
  


 












































rtems_initialization_tasks_table Initialization_tasks[] = {
  { ( (  'U' ) << 24 | (  'I' ) << 16 | (  '1' ) << 8 | (  ' '  ) )  ,
    4096    ,
    1 ,
    0x00000000  ,
    Init ,
    0x00000100  ,
    0 
  }
};
















 






















 


























rtems_driver_address_table Device_drivers[] = {

  { console_initialize, console_open, console_close, console_read, console_write, console_control } ,


  { Clock_initialize, ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0) , Clock_control } ,




  { ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0)  } 
};




 








 





# 339 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3





 
 




 
















































 








rtems_extensions_table Configuration_Initial_Extensions[] = {






    { ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0) , ((void *)0)  }
};







 



# 565 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3













 







# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/eventflags.h" 1 3
 

















# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/object.h" 1 3
 



















typedef Objects_Control ITRON_Objects_Control;

 







 










 









 










 












 





 







 










 

















 

# 19 "/usr/local/rtems/mrm332/lib/include/rtems/itron/eventflags.h" 2 3


 



typedef struct {
  ITRON_Objects_Control   Object;
  unsigned32              XXX_more_stuff_goes_here;
}   ITRON_Eventflags_Control;

 




extern  Objects_Information  _ITRON_Eventflags_Information;

 







void _ITRON_Eventflags_Manager_initialization(
  unsigned32 maximum_eventflags
);

 



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/eventflags.inl" 1 3
 

















 
















static __inline__  ITRON_Eventflags_Control *_ITRON_Eventflags_Allocate(
  ID   flgid
)
{
  return (ITRON_Eventflags_Control *)_Objects_Allocate_by_index( ( 
    &_ITRON_Eventflags_Information ), ( 
    flgid ), ( 
    sizeof(ITRON_Eventflags_Control)
   ) ) ;
}

 










 









 













static __inline__  void _ITRON_Eventflags_Free (
  ITRON_Eventflags_Control *the_eventflags
)
{
  _Objects_Free( (  &_ITRON_Eventflags_Information ), (  &the_eventflags->Object  ) ) ;
}

 





















static __inline__  ITRON_Eventflags_Control *_ITRON_Eventflags_Get (
  ID                 id,
  Objects_Locations *location
)
{
  return (ITRON_Eventflags_Control *)
    _Objects_Get( (  &_ITRON_Eventflags_Information ), (  id ), (  location  ) ) ;
}

 













static __inline__  boolean _ITRON_Eventflags_Is_null (
  ITRON_Eventflags_Control *the_eventflags
)
{
  return ( the_eventflags == ((void *)0)  );
}

 

 






 

# 53 "/usr/local/rtems/mrm332/lib/include/rtems/itron/eventflags.h" 2 3







 

# 586 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/fmempool.h" 1 3
 



















 




typedef struct {
  ITRON_Objects_Control   Object;
  unsigned32              XXX_more_stuff_goes_here;
}   ITRON_Fixed_memory_pool_Control;

 




extern  Objects_Information  _ITRON_Fixed_memory_pool_Information;

 







void _ITRON_Fixed_memory_pool_Manager_initialization(
  unsigned32 maximum_fixed_memory_pools
);

 



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/fmempool.inl" 1 3
 

















 
















static __inline__  ITRON_Fixed_memory_pool_Control
 *_ITRON_Fixed_memory_pool_Allocate(
  ID   mpfid
)
{
  return (ITRON_Fixed_memory_pool_Control *)_Objects_Allocate_by_index( ( 
    &_ITRON_Fixed_memory_pool_Information ), ( 
    mpfid ), ( 
    sizeof(ITRON_Fixed_memory_pool_Control)
   ) ) ;
}

 










 










 













static __inline__  void _ITRON_Fixed_memory_pool_Free (
  ITRON_Fixed_memory_pool_Control *the_fixed_memory_pool
)
{
  _Objects_Free( ( 
    &_ITRON_Fixed_memory_pool_Information ), ( 
    &the_fixed_memory_pool->Object
   ) ) ;
}

 





















static __inline__  ITRON_Fixed_memory_pool_Control
  *_ITRON_Fixed_memory_pool_Get (
  ID                 id,
  Objects_Locations *location
)
{
  return (ITRON_Fixed_memory_pool_Control *)
    _Objects_Get( (  &_ITRON_Fixed_memory_pool_Information ), (  id ), (  location  ) ) ;
}

 














static __inline__  boolean _ITRON_Fixed_memory_pool_Is_null (
  ITRON_Fixed_memory_pool_Control *the_fixed_memory_pool
)
{
  return ( the_fixed_memory_pool == ((void *)0)  );
}

 

 






 

# 54 "/usr/local/rtems/mrm332/lib/include/rtems/itron/fmempool.h" 2 3







 

# 587 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/mbox.h" 1 3
 




















 



typedef struct {
  ITRON_Objects_Control       Object;
  unsigned32                  count;
  boolean                     do_message_priority;
  CORE_message_queue_Control  message_queue;
}   ITRON_Mailbox_Control;

 




extern  Objects_Information  _ITRON_Mailbox_Information;

 







void _ITRON_Mailbox_Manager_initialization(
  unsigned32 maximum_mailboxes
);

 








ER _ITRON_Mailbox_Translate_core_message_queue_return_code(
  CORE_message_queue_Status status
);

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/mbox.inl" 1 3
 

















 
















static __inline__  ITRON_Mailbox_Control *_ITRON_Mailbox_Allocate(
  ID   mbxid
)
{
  return (ITRON_Mailbox_Control *)_Objects_Allocate_by_index( ( 
    &_ITRON_Mailbox_Information ), ( 
    mbxid ), ( 
    sizeof(ITRON_Mailbox_Control)
   ) ) ;
}

 










 









 













static __inline__  void _ITRON_Mailbox_Free (
  ITRON_Mailbox_Control *the_mailbox
)
{
  _Objects_Free( (  &_ITRON_Mailbox_Information ), (  &the_mailbox->Object  ) ) ;
}

 





















static __inline__  ITRON_Mailbox_Control *_ITRON_Mailbox_Get (
  ID                 id,
  Objects_Locations *location
)
{
  return (ITRON_Mailbox_Control *)
    _Objects_Get( (  &_ITRON_Mailbox_Information ), (  id ), (  location  ) ) ;
}

 













static __inline__  boolean _ITRON_Mailbox_Is_null (
  ITRON_Mailbox_Control *the_mailbox
)
{
  return ( the_mailbox == ((void *)0)  );
}

 

 






 

# 65 "/usr/local/rtems/mrm332/lib/include/rtems/itron/mbox.h" 2 3







 

# 588 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/msgbuffer.h" 1 3
 
















    


    
 




typedef struct {
    ITRON_Objects_Control               Object;
    boolean                             is_priority_blocking;
    CORE_message_queue_Control          message_queue;
}   ITRON_Message_buffer_Control;

 




extern  Objects_Information  _ITRON_Message_buffer_Information;

 







void _ITRON_Message_buffer_Manager_initialization(
  unsigned32 maximum_message_buffers
);

 






 

ER _ITRON_Message_buffer_Translate_core_message_buffer_return_code(
  CORE_message_queue_Status status
);

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/msgbuffer.inl" 1 3
 

















 
















static __inline__  ITRON_Message_buffer_Control
 *_ITRON_Message_buffer_Allocate(
  ID   mbfid
)
{
  return (ITRON_Message_buffer_Control *)_Objects_Allocate_by_index( ( 
    &_ITRON_Message_buffer_Information ), ( 
    mbfid ), ( 
    sizeof(ITRON_Message_buffer_Control)
   ) ) ;
}

 










 









 













static __inline__  void _ITRON_Message_buffer_Free (
  ITRON_Message_buffer_Control *the_message_buffer
)
{
  _Objects_Free( ( 
    &_ITRON_Message_buffer_Information ), ( 
    &the_message_buffer->Object
   ) ) ;
}

 





















static __inline__  ITRON_Message_buffer_Control *_ITRON_Message_buffer_Get (
  ID                 id,
  Objects_Locations *location
)
{
  return (ITRON_Message_buffer_Control *)
    _Objects_Get( (  &_ITRON_Message_buffer_Information ), (  id ), (  location  ) ) ;
}

 














static __inline__  boolean _ITRON_Message_buffer_Is_null (
  ITRON_Message_buffer_Control *the_message_buffer
)
{
  return ( the_message_buffer == ((void *)0)  );
}

 

 






 

# 65 "/usr/local/rtems/mrm332/lib/include/rtems/itron/msgbuffer.h" 2 3







 
# 589 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/port.h" 1 3
 



















 



typedef struct {
  ITRON_Objects_Control   Object;
  unsigned32              XXX_more_stuff_goes_here;
}   ITRON_Port_Control;

 




extern  Objects_Information  _ITRON_Port_Information;

 







void _ITRON_Port_Manager_initialization(
  unsigned32 maximum_ports
);

 



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/port.inl" 1 3
 

















 
















static __inline__  ITRON_Port_Control *_ITRON_Port_Allocate(
  ID   porid
)
{
  return (ITRON_Port_Control *)_Objects_Allocate_by_index( ( 
    &_ITRON_Port_Information ), ( 
    porid ), ( 
    sizeof(ITRON_Port_Control)
   ) ) ;
}

 










 









 













static __inline__  void _ITRON_Port_Free (
  ITRON_Port_Control *the_port
)
{
  _Objects_Free( (  &_ITRON_Port_Information ), (  &the_port->Object  ) ) ;
}

 





















static __inline__  ITRON_Port_Control *_ITRON_Port_Get (
  ID                 id,
  Objects_Locations *location
)
{
  return (ITRON_Port_Control *)
    _Objects_Get( (  &_ITRON_Port_Information ), (  id ), (  location  ) ) ;
}

 













static __inline__  boolean _ITRON_Port_Is_null (
  ITRON_Port_Control *the_port
)
{
  return ( the_port == ((void *)0)  );
}

 

 






 

# 53 "/usr/local/rtems/mrm332/lib/include/rtems/itron/port.h" 2 3







 

# 590 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/semaphore.h" 1 3
 




















 



typedef struct {
  ITRON_Objects_Control   Object;
  boolean                 is_priority_blocking;
  CORE_semaphore_Control  semaphore;
}   ITRON_Semaphore_Control;

 




extern  Objects_Information  _ITRON_Semaphore_Information;

 







void _ITRON_Semaphore_Manager_initialization(
  unsigned32 maximum_semaphores
);

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/semaphore.inl" 1 3
 

















 
















static __inline__  ITRON_Semaphore_Control *_ITRON_Semaphore_Allocate(
  ID   semid
)
{
  return (ITRON_Semaphore_Control *)_Objects_Allocate_by_index( ( 
    &_ITRON_Semaphore_Information ), ( 
    semid ), ( 
    sizeof(ITRON_Semaphore_Control)
   ) ) ;
}

 










 









 













static __inline__  void _ITRON_Semaphore_Free (
  ITRON_Semaphore_Control *the_semaphore
)
{
  _Objects_Free( (  &_ITRON_Semaphore_Information ), (  &the_semaphore->Object  ) ) ;
}

 





















static __inline__  ITRON_Semaphore_Control *_ITRON_Semaphore_Get (
  ID                 id,
  Objects_Locations *location
)
{
  return (ITRON_Semaphore_Control *)
    _Objects_Get( (  &_ITRON_Semaphore_Information ), (  id ), (  location  ) ) ;
}

 













static __inline__  boolean _ITRON_Semaphore_Is_null (
  ITRON_Semaphore_Control *the_semaphore
)
{
  return ( the_semaphore == ((void *)0)  );
}

 













static __inline__  ER  _ITRON_Semaphore_Translate_core_semaphore_return_code (
  unsigned32 the_semaphore_status
)
{
 
  switch ( the_semaphore_status ) {
    case  CORE_SEMAPHORE_STATUS_SUCCESSFUL:
      return 0 ;
    case CORE_SEMAPHORE_STATUS_UNSATISFIED_NOWAIT:
      return (-85) ;
    case CORE_SEMAPHORE_WAS_DELETED:
      return (-81) ;
    case CORE_SEMAPHORE_TIMEOUT:
      return (-85) ;
    case CORE_SEMAPHORE_MAXIMUM_COUNT_EXCEEDED:
      return (-73) ;
    case 0x1111111 :
      return 0x1111111 ;
  }
  return 0 ;    
}






 

# 51 "/usr/local/rtems/mrm332/lib/include/rtems/itron/semaphore.h" 2 3







 

# 591 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/task.h" 1 3
 





















 










 
 





typedef struct {
  unsigned32                unused;   
                                       
}  ITRON_API_Control;

 




extern  Objects_Information _ITRON_Task_Information;

 



extern  itron_initialization_tasks_table
               *_ITRON_Task_User_initialization_tasks;
extern  unsigned32   _ITRON_Task_Number_of_initialization_tasks;


 





void _ITRON_Task_Manager_initialization(
  unsigned32                        maximum_tasks,
  unsigned32                        number_of_initialization_tasks,
  itron_initialization_tasks_table *user_tasks
);

 




ER _ITRON_Delete_task(
  Thread_Control *the_thread
);

 

















 

# 592 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3

# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/vmempool.h" 1 3
 



















 




typedef struct {
  ITRON_Objects_Control   Object;
  unsigned32              XXX_more_stuff_goes_here;
}   ITRON_Variable_memory_pool_Control;

 




extern  Objects_Information  _ITRON_Variable_memory_pool_Information;

 







void _ITRON_Variable_memory_pool_Manager_initialization(
  unsigned32 maximum_variable_memory_pools
);

 



# 1 "/usr/local/rtems/mrm332/lib/include/rtems/itron/vmempool.inl" 1 3
 

















 

















static __inline__  ITRON_Variable_memory_pool_Control
  *_ITRON_Variable_memory_pool_Allocate(
  ID   mplid
)
{
  return (ITRON_Variable_memory_pool_Control *)_Objects_Allocate_by_index( ( 
    &_ITRON_Variable_memory_pool_Information ), ( 
    mplid ), ( 
    sizeof(ITRON_Variable_memory_pool_Control)
   ) ) ;
}

 










 









 













static __inline__  void _ITRON_Variable_memory_pool_Free (
  ITRON_Variable_memory_pool_Control *the_variable_memory_pool
)
{
  _Objects_Free( ( 
    &_ITRON_Variable_memory_pool_Information ), ( 
    &the_variable_memory_pool->Object
   ) ) ;
}

 





















static __inline__  ITRON_Variable_memory_pool_Control
  *_ITRON_Variable_memory_pool_Get (
  ID                 id,
  Objects_Locations *location
)
{
  return (ITRON_Variable_memory_pool_Control *) _Objects_Get( ( 
    &_ITRON_Variable_memory_pool_Information ), ( 
    id ), ( 
    location
   ) ) ;
}

 














static __inline__  boolean _ITRON_Variable_memory_pool_Is_null (
  ITRON_Variable_memory_pool_Control *the_variable_memory_pool
)
{
  return ( the_variable_memory_pool == ((void *)0)  );
}

 

 






 

# 54 "/usr/local/rtems/mrm332/lib/include/rtems/itron/vmempool.h" 2 3







 

# 593 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 2 3


































# 675 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3














































# 738 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3


# 753 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3



 



















































# 826 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3






















# 871 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3


# 891 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3











rtems_api_configuration_table Configuration_RTEMS_API = {
  8 ,
  0 ,
  0  + (3  + 1)  +
    ((1  * 4) + 1) ,
  0 ,
  0 ,
  0  + 1 ,
  0 ,
  0 ,
  sizeof(Initialization_tasks ) / sizeof(rtems_initialization_tasks_table) ,
  Initialization_tasks 
};

# 931 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3



itron_api_configuration_table Configuration_ITRON_API = {
  0 ,
  0 ,
  0 ,
  0 ,
  0 ,
  0 ,
  0 ,
  0 ,
  0 ,
  ((void *)0)  
};


rtems_configuration_table Configuration = {
  ((void *)0)  ,
  (( 0  + ( ((  0   ) * ( sizeof(ITRON_Semaphore_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ((  0   ) * ( sizeof(ITRON_Eventflags_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ((  0   ) * ( sizeof(ITRON_Mailbox_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ((  0   ) * ( sizeof(ITRON_Message_buffer_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ((  0   ) * ( sizeof(ITRON_Port_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ((  0   ) * (sizeof(ITRON_Variable_memory_pool_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) ) ))  + ((  0   ) * ( sizeof(ITRON_Fixed_memory_pool_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + (4096    * 2)  )  + ((( 8  + 0  + 0  + 0   ) + 1 ) * ((sizeof(Thread_Control) + sizeof( Context_Control_fp )   + 4096   + sizeof( RTEMS_API_Control ) + 0  + ( sizeof (ITRON_API_Control) )  + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) ) )) )  + (( 0  ) * ( sizeof(Timer_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + (( 0  + (3  + 1)  + ((1  * 4) + 1)  ) * ( sizeof(Semaphore_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ( ( 0  ) * ( sizeof(Message_queue_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ( ( 0  ) * ( sizeof(Partition_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ( (  0  + 1   ) * ( sizeof(Region_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ( ( 0  ) * ( sizeof(Dual_ported_memory_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ( ( 0  ) * ( sizeof(Rate_monotonic_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ( (  0  + 1  + 0   ) * ( sizeof(Extension_Control) + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) )  ) )  + ((( 20  ) + 1) * ( sizeof(rtems_driver_name_t) ) )  + 0  + ( ((( 1 ) + 1 ) * ((sizeof(Thread_Control) + sizeof( Context_Control_fp )   + 4096   + sizeof( RTEMS_API_Control ) + 0  + ( sizeof (ITRON_API_Control) )  + ( sizeof(Objects_Control *) + sizeof(rtems_name *) + sizeof(rtems_name) ) )) )  + (256 * 12) + 256        + 4096     )  + (((0 )+1) * 1024) + ((4 * 4096   ) ) + (0 ) ) & 0xfffffc00) ,
  0  + 1  + 
      0 ,
  ((  1  ) * 1000)   ,
  50 ,
  20 ,
  sizeof (Device_drivers)/
    sizeof(rtems_driver_address_table),       
  Device_drivers,                             
  ((sizeof(Configuration_Initial_Extensions) / sizeof(rtems_extensions_table)) - 1) ,     
  Configuration_Initial_Extensions,           
  ((void *)0)  ,            
  &Configuration_RTEMS_API,                   



  ((void *)0) ,                                       


  &Configuration_ITRON_API                    



};







 
 



 



# 1006 "/usr/local/rtems/mrm332/lib/include/confdefs.h" 3



 
# 606 "init.c" 2


 
